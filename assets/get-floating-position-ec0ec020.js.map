{"version":3,"file":"get-floating-position-ec0ec020.js","sources":["../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js","../../node_modules/@floating-ui/react/dist/floating-ui.react.esm.js","../../node_modules/@mantine/core/esm/Floating/use-floating-auto-update.js","../../node_modules/@mantine/core/esm/Floating/FloatingArrow/get-arrow-position-styles.js","../../node_modules/@mantine/core/esm/Floating/FloatingArrow/FloatingArrow.js","../../node_modules/@mantine/core/esm/Floating/get-floating-position/get-floating-position.js"],"sourcesContent":["import { arrow as arrow$1, computePosition } from '@floating-ui/dom';\nexport { autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect, useEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\n\n/**\n * A data provider that provides data to position an inner element of the\n * floating element (usually a triangle or caret) so that it is centered to the\n * reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => {\n  const {\n    element,\n    padding\n  } = options;\n  function isRef(value) {\n    return Object.prototype.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options,\n    fn(args) {\n      if (isRef(element)) {\n        if (element.current != null) {\n          return arrow$1({\n            element: element.current,\n            padding\n          }).fn(args);\n        }\n        return {};\n      } else if (element) {\n        return arrow$1({\n          element,\n          padding\n        }).fn(args);\n      }\n      return {};\n    }\n  };\n};\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  let length, i, keys;\n  if (a && b && typeof a == 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\n\nfunction useLatestRef(value) {\n  const ref = React.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\n/**\n * Provides data to position a floating element.\n * @see https://floating-ui.com/docs/react\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React.useState({\n    x: null,\n    y: null,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const referenceRef = React.useRef(null);\n  const floatingRef = React.useRef(null);\n  const dataRef = React.useRef(data);\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform);\n  const [reference, _setReference] = React.useState(null);\n  const [floating, _setFloating] = React.useState(null);\n  const setReference = React.useCallback(node => {\n    if (referenceRef.current !== node) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  const setFloating = React.useCallback(node => {\n    if (floatingRef.current !== node) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  const update = React.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then(data => {\n      const fullData = {\n        ...data,\n        isPositioned: true\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData(data => ({\n        ...data,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (reference && floating) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(reference, floating, update);\n      } else {\n        update();\n      }\n    }\n  }, [reference, floating, update, whileElementsMountedRef]);\n  const refs = React.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React.useMemo(() => ({\n    reference,\n    floating\n  }), [reference, floating]);\n  return React.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    reference: setReference,\n    floating: setFloating\n  }), [data, update, refs, elements, setReference, setFloating]);\n}\n\nexport { arrow, useFloating };\n","import * as React from 'react';\nimport { useLayoutEffect, useEffect, useRef } from 'react';\nimport { hideOthers } from 'aria-hidden';\nimport { tabbable } from 'tabbable';\nimport { createPortal, flushSync } from 'react-dom';\nimport { getOverflowAncestors, offset, detectOverflow, useFloating as useFloating$1 } from '@floating-ui/react-dom';\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, getOverflowAncestors, hide, inline, limitShift, offset, platform, shift, size } from '@floating-ui/react-dom';\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\nlet serverHandoffComplete = false;\nlet count = 0;\nconst genId = () => \"floating-ui-\" + count++;\nfunction useFloatingId() {\n  const [id, setId] = React.useState(() => serverHandoffComplete ? genId() : undefined);\n  index(() => {\n    if (id == null) {\n      setId(genId());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(() => {\n    if (!serverHandoffComplete) {\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id;\n}\n\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useReactId = React[/*#__PURE__*/'useId'.toString()];\n\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n * @see https://floating-ui.com/docs/useId\n */\nconst useId = useReactId || useFloatingId;\n\nfunction createPubSub() {\n  const map = new Map();\n  return {\n    emit(event, data) {\n      var _map$get;\n      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach(handler => handler(data));\n    },\n    on(event, listener) {\n      map.set(event, [...(map.get(event) || []), listener]);\n    },\n    off(event, listener) {\n      map.set(event, (map.get(event) || []).filter(l => l !== listener));\n    }\n  };\n}\n\nconst FloatingNodeContext = /*#__PURE__*/React.createContext(null);\nconst FloatingTreeContext = /*#__PURE__*/React.createContext(null);\nconst useFloatingParentNodeId = () => {\n  var _React$useContext;\n  return ((_React$useContext = React.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;\n};\nconst useFloatingTree = () => React.useContext(FloatingTreeContext);\n\n/**\n * Registers a node into the floating tree, returning its id.\n */\nconst useFloatingNodeId = customParentId => {\n  const id = useId();\n  const tree = useFloatingTree();\n  const reactParentId = useFloatingParentNodeId();\n  const parentId = customParentId || reactParentId;\n  index(() => {\n    const node = {\n      id,\n      parentId\n    };\n    tree == null ? void 0 : tree.addNode(node);\n    return () => {\n      tree == null ? void 0 : tree.removeNode(node);\n    };\n  }, [tree, id, parentId]);\n  return id;\n};\n\n/**\n * Provides parent node context for nested floating elements.\n * @see https://floating-ui.com/docs/FloatingTree\n */\nconst FloatingNode = _ref => {\n  let {\n    children,\n    id\n  } = _ref;\n  const parentId = useFloatingParentNodeId();\n  return /*#__PURE__*/React.createElement(FloatingNodeContext.Provider, {\n    value: React.useMemo(() => ({\n      id,\n      parentId\n    }), [id, parentId])\n  }, children);\n};\n\n/**\n * Provides context for nested floating elements when they are not children of\n * each other on the DOM (i.e. portalled to a common node, rather than their\n * respective parent).\n * @see https://floating-ui.com/docs/FloatingTree\n */\nconst FloatingTree = _ref2 => {\n  let {\n    children\n  } = _ref2;\n  const nodesRef = React.useRef([]);\n  const addNode = React.useCallback(node => {\n    nodesRef.current = [...nodesRef.current, node];\n  }, []);\n  const removeNode = React.useCallback(node => {\n    nodesRef.current = nodesRef.current.filter(n => n !== node);\n  }, []);\n  const events = React.useState(() => createPubSub())[0];\n  return /*#__PURE__*/React.createElement(FloatingTreeContext.Provider, {\n    value: React.useMemo(() => ({\n      nodesRef,\n      addNode,\n      removeNode,\n      events\n    }), [nodesRef, addNode, removeNode, events])\n  }, children);\n};\n\nfunction getDocument(node) {\n  return (node == null ? void 0 : node.ownerDocument) || document;\n}\n\n// Avoid Chrome DevTools blue warning.\nfunction getPlatform() {\n  const uaData = navigator.userAgentData;\n  if (uaData != null && uaData.platform) {\n    return uaData.platform;\n  }\n  return navigator.platform;\n}\nfunction getUserAgent() {\n  const uaData = navigator.userAgentData;\n  if (uaData && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(_ref => {\n      let {\n        brand,\n        version\n      } = _ref;\n      return brand + \"/\" + version;\n    }).join(' ');\n  }\n  return navigator.userAgent;\n}\n\nfunction getWindow(value) {\n  return getDocument(value).defaultView || window;\n}\nfunction isElement(value) {\n  return value ? value instanceof getWindow(value).Element : false;\n}\nfunction isHTMLElement(value) {\n  return value ? value instanceof getWindow(value).HTMLElement : false;\n}\nfunction isShadowRoot(node) {\n  // Browsers without `ShadowRoot` support\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  const OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\nfunction isVirtualClick(event) {\n  if (event.mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n  const androidRe = /Android/i;\n  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {\n    return event.type === 'click' && event.buttons === 1;\n  }\n  return event.detail === 0 && !event.pointerType;\n}\nfunction isVirtualPointerEvent(event) {\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== 'mouse' ||\n  // iOS VoiceOver returns 0.333• for width/height.\n  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;\n}\nfunction isSafari() {\n  // Chrome DevTools does not complain about navigator.vendor\n  return /apple/i.test(navigator.vendor);\n}\nfunction isMac() {\n  return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\n}\nfunction isMouseLikePointerType(pointerType, strict) {\n  // On some Linux machines with Chromium, mouse inputs return a `pointerType`\n  // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\n  const values = ['mouse', 'pen'];\n  if (!strict) {\n    values.push('', undefined);\n  }\n  return values.includes(pointerType);\n}\n\nfunction useLatestRef(value) {\n  const ref = useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\nconst safePolygonIdentifier = 'data-floating-ui-safe-polygon';\nfunction getDelay(value, prop, pointerType) {\n  if (pointerType && !isMouseLikePointerType(pointerType)) {\n    return 0;\n  }\n  if (typeof value === 'number') {\n    return value;\n  }\n  return value == null ? void 0 : value[prop];\n}\n/**\n * Opens the floating element while hovering over the reference element, like\n * CSS `:hover`.\n * @see https://floating-ui.com/docs/useHover\n */\nconst useHover = function (context, _temp) {\n  let {\n    enabled = true,\n    delay = 0,\n    handleClose = null,\n    mouseOnly = false,\n    restMs = 0,\n    move = true\n  } = _temp === void 0 ? {} : _temp;\n  const {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    elements: {\n      domReference,\n      floating\n    },\n    refs\n  } = context;\n  const tree = useFloatingTree();\n  const parentId = useFloatingParentNodeId();\n  const handleCloseRef = useLatestRef(handleClose);\n  const delayRef = useLatestRef(delay);\n  const pointerTypeRef = React.useRef();\n  const timeoutRef = React.useRef();\n  const handlerRef = React.useRef();\n  const restTimeoutRef = React.useRef();\n  const blockMouseMoveRef = React.useRef(true);\n  const performedPointerEventsMutationRef = React.useRef(false);\n  const unbindMouseMoveRef = React.useRef(() => {});\n  const isHoverOpen = React.useCallback(() => {\n    var _dataRef$current$open;\n    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;\n    return (type == null ? void 0 : type.includes('mouse')) && type !== 'mousedown';\n  }, [dataRef]);\n\n  // When dismissing before opening, clear the delay timeouts to cancel it\n  // from showing.\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss() {\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      blockMouseMoveRef.current = true;\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [enabled, events]);\n  React.useEffect(() => {\n    if (!enabled || !handleCloseRef.current || !open) {\n      return;\n    }\n    function onLeave() {\n      if (isHoverOpen()) {\n        onOpenChange(false);\n      }\n    }\n    const html = getDocument(floating).documentElement;\n    html.addEventListener('mouseleave', onLeave);\n    return () => {\n      html.removeEventListener('mouseleave', onLeave);\n    };\n  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);\n  const closeWithDelay = React.useCallback(function (runElseBranch) {\n    if (runElseBranch === void 0) {\n      runElseBranch = true;\n    }\n    const closeDelay = getDelay(delayRef.current, 'close', pointerTypeRef.current);\n    if (closeDelay && !handlerRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);\n    } else if (runElseBranch) {\n      clearTimeout(timeoutRef.current);\n      onOpenChange(false);\n    }\n  }, [delayRef, onOpenChange]);\n  const cleanupMouseMoveHandler = React.useCallback(() => {\n    unbindMouseMoveRef.current();\n    handlerRef.current = undefined;\n  }, []);\n  const clearPointerEvents = React.useCallback(() => {\n    if (performedPointerEventsMutationRef.current) {\n      const body = getDocument(refs.floating.current).body;\n      body.style.pointerEvents = '';\n      body.removeAttribute(safePolygonIdentifier);\n      performedPointerEventsMutationRef.current = false;\n    }\n  }, [refs]);\n\n  // Registering the mouse events on the reference directly to bypass React's\n  // delegation system. If the cursor was on a disabled element and then entered\n  // the reference (no gap), `mouseenter` doesn't fire in the delegation system.\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function isClickLikeOpenEvent() {\n      return dataRef.current.openEvent ? ['click', 'mousedown'].includes(dataRef.current.openEvent.type) : false;\n    }\n    function onMouseEnter(event) {\n      clearTimeout(timeoutRef.current);\n      blockMouseMoveRef.current = false;\n      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, 'open') === 0) {\n        return;\n      }\n      dataRef.current.openEvent = event;\n      const openDelay = getDelay(delayRef.current, 'open', pointerTypeRef.current);\n      if (openDelay) {\n        timeoutRef.current = setTimeout(() => {\n          onOpenChange(true);\n        }, openDelay);\n      } else {\n        onOpenChange(true);\n      }\n    }\n    function onMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      unbindMouseMoveRef.current();\n      const doc = getDocument(floating);\n      clearTimeout(restTimeoutRef.current);\n      if (handleCloseRef.current) {\n        // Prevent clearing `onScrollMouseLeave` timeout.\n        if (!open) {\n          clearTimeout(timeoutRef.current);\n        }\n        handlerRef.current = handleCloseRef.current({\n          ...context,\n          tree,\n          x: event.clientX,\n          y: event.clientY,\n          onClose() {\n            clearPointerEvents();\n            cleanupMouseMoveHandler();\n            closeWithDelay();\n          }\n        });\n        const handler = handlerRef.current;\n        doc.addEventListener('mousemove', handler);\n        unbindMouseMoveRef.current = () => {\n          doc.removeEventListener('mousemove', handler);\n        };\n        return;\n      }\n      closeWithDelay();\n    }\n\n    // Ensure the floating element closes after scrolling even if the pointer\n    // did not move.\n    // https://github.com/floating-ui/floating-ui/discussions/1692\n    function onScrollMouseLeave(event) {\n      if (isClickLikeOpenEvent()) {\n        return;\n      }\n      handleCloseRef.current == null ? void 0 : handleCloseRef.current({\n        ...context,\n        tree,\n        x: event.clientX,\n        y: event.clientY,\n        onClose() {\n          clearPointerEvents();\n          cleanupMouseMoveHandler();\n          closeWithDelay();\n        }\n      })(event);\n    }\n    if (isElement(domReference)) {\n      const ref = domReference;\n      open && ref.addEventListener('mouseleave', onScrollMouseLeave);\n      floating == null ? void 0 : floating.addEventListener('mouseleave', onScrollMouseLeave);\n      move && ref.addEventListener('mousemove', onMouseEnter, {\n        once: true\n      });\n      ref.addEventListener('mouseenter', onMouseEnter);\n      ref.addEventListener('mouseleave', onMouseLeave);\n      return () => {\n        open && ref.removeEventListener('mouseleave', onScrollMouseLeave);\n        floating == null ? void 0 : floating.removeEventListener('mouseleave', onScrollMouseLeave);\n        move && ref.removeEventListener('mousemove', onMouseEnter);\n        ref.removeEventListener('mouseenter', onMouseEnter);\n        ref.removeEventListener('mouseleave', onMouseLeave);\n      };\n    }\n  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);\n\n  // Block pointer-events of every element other than the reference and floating\n  // while the floating element is open and has a `handleClose` handler. Also\n  // handles nested floating elements.\n  // https://github.com/floating-ui/floating-ui/issues/1722\n  index(() => {\n    var _handleCloseRef$curre;\n    if (!enabled) {\n      return;\n    }\n    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {\n      const body = getDocument(floating).body;\n      body.setAttribute(safePolygonIdentifier, '');\n      body.style.pointerEvents = 'none';\n      performedPointerEventsMutationRef.current = true;\n      if (isElement(domReference) && floating) {\n        var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n        const ref = domReference;\n        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\n        if (parentFloating) {\n          parentFloating.style.pointerEvents = '';\n        }\n        ref.style.pointerEvents = 'auto';\n        floating.style.pointerEvents = 'auto';\n        return () => {\n          ref.style.pointerEvents = '';\n          floating.style.pointerEvents = '';\n        };\n      }\n    }\n  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);\n  index(() => {\n    if (!open) {\n      pointerTypeRef.current = undefined;\n      cleanupMouseMoveHandler();\n      clearPointerEvents();\n    }\n  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);\n  React.useEffect(() => {\n    return () => {\n      cleanupMouseMoveHandler();\n      clearTimeout(timeoutRef.current);\n      clearTimeout(restTimeoutRef.current);\n      clearPointerEvents();\n    };\n  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    function setPointerRef(event) {\n      pointerTypeRef.current = event.pointerType;\n    }\n    return {\n      reference: {\n        onPointerDown: setPointerRef,\n        onPointerEnter: setPointerRef,\n        onMouseMove() {\n          if (open || restMs === 0) {\n            return;\n          }\n          clearTimeout(restTimeoutRef.current);\n          restTimeoutRef.current = setTimeout(() => {\n            if (!blockMouseMoveRef.current) {\n              onOpenChange(true);\n            }\n          }, restMs);\n        }\n      },\n      floating: {\n        onMouseEnter() {\n          clearTimeout(timeoutRef.current);\n        },\n        onMouseLeave() {\n          events.emit('dismiss', {\n            type: 'mouseLeave',\n            data: {\n              returnFocus: false\n            }\n          });\n          closeWithDelay(false);\n        }\n      }\n    };\n  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);\n};\n\nconst FloatingDelayGroupContext = /*#__PURE__*/React.createContext({\n  delay: 0,\n  initialDelay: 0,\n  timeoutMs: 0,\n  currentId: null,\n  setCurrentId: () => {},\n  setState: () => {},\n  isInstantPhase: false\n});\nconst useDelayGroupContext = () => React.useContext(FloatingDelayGroupContext);\n\n/**\n * Provides context for a group of floating elements that should share a\n * `delay`.\n * @see https://floating-ui.com/docs/FloatingDelayGroup\n */\nconst FloatingDelayGroup = _ref => {\n  let {\n    children,\n    delay,\n    timeoutMs = 0\n  } = _ref;\n  const [state, setState] = React.useReducer((prev, next) => ({\n    ...prev,\n    ...next\n  }), {\n    delay,\n    timeoutMs,\n    initialDelay: delay,\n    currentId: null,\n    isInstantPhase: false\n  });\n  const initialCurrentIdRef = React.useRef(null);\n  const setCurrentId = React.useCallback(currentId => {\n    setState({\n      currentId\n    });\n  }, []);\n  index(() => {\n    if (state.currentId) {\n      if (initialCurrentIdRef.current === null) {\n        initialCurrentIdRef.current = state.currentId;\n      } else {\n        setState({\n          isInstantPhase: true\n        });\n      }\n    } else {\n      setState({\n        isInstantPhase: false\n      });\n      initialCurrentIdRef.current = null;\n    }\n  }, [state.currentId]);\n  return /*#__PURE__*/React.createElement(FloatingDelayGroupContext.Provider, {\n    value: React.useMemo(() => ({\n      ...state,\n      setState,\n      setCurrentId\n    }), [state, setState, setCurrentId])\n  }, children);\n};\nconst useDelayGroup = (_ref2, _ref3) => {\n  let {\n    open,\n    onOpenChange\n  } = _ref2;\n  let {\n    id\n  } = _ref3;\n  const {\n    currentId,\n    setCurrentId,\n    initialDelay,\n    setState,\n    timeoutMs\n  } = useDelayGroupContext();\n  React.useEffect(() => {\n    if (currentId) {\n      setState({\n        delay: {\n          open: 1,\n          close: getDelay(initialDelay, 'close')\n        }\n      });\n      if (currentId !== id) {\n        onOpenChange(false);\n      }\n    }\n  }, [id, onOpenChange, setState, currentId, initialDelay]);\n  React.useEffect(() => {\n    function unset() {\n      onOpenChange(false);\n      setState({\n        delay: initialDelay,\n        currentId: null\n      });\n    }\n    if (!open && currentId === id) {\n      if (timeoutMs) {\n        const timeout = window.setTimeout(unset, timeoutMs);\n        return () => {\n          clearTimeout(timeout);\n        };\n      } else {\n        unset();\n      }\n    }\n  }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);\n  React.useEffect(() => {\n    if (open) {\n      setCurrentId(id);\n    }\n  }, [open, setCurrentId, id]);\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\n * Find the real active element. Traverses into shadowRoots.\n */\nfunction activeElement$1(doc) {\n  let activeElement = doc.activeElement;\n  while (((_activeElement = activeElement) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {\n    var _activeElement, _activeElement$shadow;\n    activeElement = activeElement.shadowRoot.activeElement;\n  }\n  return activeElement;\n}\n\nfunction contains(parent, child) {\n  if (!parent || !child) {\n    return false;\n  }\n  const rootNode = child.getRootNode && child.getRootNode();\n\n  // First, attempt with faster native method\n  if (parent.contains(child)) {\n    return true;\n  }\n  // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n    let next = child;\n    do {\n      if (next && parent === next) {\n        return true;\n      }\n      // @ts-ignore\n      next = next.parentNode || next.host;\n    } while (next);\n  }\n\n  // Give up, the result is false\n  return false;\n}\n\nlet rafId = 0;\nfunction enqueueFocus(el, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    preventScroll = false,\n    cancelPrevious = true,\n    sync = false\n  } = options;\n  cancelPrevious && cancelAnimationFrame(rafId);\n  const exec = () => el == null ? void 0 : el.focus({\n    preventScroll\n  });\n  if (sync) {\n    exec();\n  } else {\n    rafId = requestAnimationFrame(exec);\n  }\n}\n\nfunction getAncestors(nodes, id) {\n  var _nodes$find;\n  let allAncestors = [];\n  let currentParentId = (_nodes$find = nodes.find(node => node.id === id)) == null ? void 0 : _nodes$find.parentId;\n  while (currentParentId) {\n    const currentNode = nodes.find(node => node.id === currentParentId);\n    currentParentId = currentNode == null ? void 0 : currentNode.parentId;\n    if (currentNode) {\n      allAncestors = allAncestors.concat(currentNode);\n    }\n  }\n  return allAncestors;\n}\n\nfunction getChildren(nodes, id) {\n  let allChildren = nodes.filter(node => {\n    var _node$context;\n    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);\n  }) || [];\n  let currentChildren = allChildren;\n  while (currentChildren.length) {\n    currentChildren = nodes.filter(node => {\n      var _currentChildren;\n      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some(n => {\n        var _node$context2;\n        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);\n      });\n    }) || [];\n    allChildren = allChildren.concat(currentChildren);\n  }\n  return allChildren;\n}\n\nfunction getTarget(event) {\n  if ('composedPath' in event) {\n    return event.composedPath()[0];\n  }\n\n  // TS thinks `event` is of type never as it assumes all browsers support\n  // `composedPath()`, but browsers without shadow DOM don't.\n  return event.target;\n}\n\nconst TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\nfunction isTypeableElement(element) {\n  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nconst getTabbableOptions = () => ({\n  getShadowRoot: true,\n  displayCheck:\n  // JSDOM does not support the `tabbable` library. To solve this we can\n  // check if `ResizeObserver` is a real function (not polyfilled), which\n  // determines if the current environment is JSDOM-like.\n  typeof ResizeObserver === 'function' && ResizeObserver.toString().includes('[native code]') ? 'full' : 'none'\n});\nfunction getTabbableIn(container, direction) {\n  const allTabbable = tabbable(container, getTabbableOptions());\n  if (direction === 'prev') {\n    allTabbable.reverse();\n  }\n  const activeIndex = allTabbable.indexOf(activeElement$1(getDocument(container)));\n  const nextTabbableElements = allTabbable.slice(activeIndex + 1);\n  return nextTabbableElements[0];\n}\nfunction getNextTabbable() {\n  return getTabbableIn(document.body, 'next');\n}\nfunction getPreviousTabbable() {\n  return getTabbableIn(document.body, 'prev');\n}\nfunction isOutsideEvent(event, container) {\n  const containerElement = container || event.currentTarget;\n  const relatedTarget = event.relatedTarget;\n  return !relatedTarget || !contains(containerElement, relatedTarget);\n}\nfunction disableFocusInside(container) {\n  const tabbableElements = tabbable(container, getTabbableOptions());\n  tabbableElements.forEach(element => {\n    element.dataset.tabindex = element.getAttribute('tabindex') || '';\n    element.setAttribute('tabindex', '-1');\n  });\n}\nfunction enableFocusInside(container) {\n  const elements = container.querySelectorAll('[data-tabindex]');\n  elements.forEach(element => {\n    const tabindex = element.dataset.tabindex;\n    delete element.dataset.tabindex;\n    if (tabindex) {\n      element.setAttribute('tabindex', tabindex);\n    } else {\n      element.removeAttribute('tabindex');\n    }\n  });\n}\n\n// `toString()` prevents bundlers from trying to `import { useInsertionEffect } from 'react'`\nconst useInsertionEffect = React[/*#__PURE__*/'useInsertionEffect'.toString()];\nconst useSafeInsertionEffect = useInsertionEffect || (fn => fn());\nfunction useEvent(callback) {\n  const ref = React.useRef(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      throw new Error('Cannot call an event handler while rendering.');\n    }\n  });\n  useSafeInsertionEffect(() => {\n    ref.current = callback;\n  });\n  return React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current == null ? void 0 : ref.current(...args);\n  }, []);\n}\n\n// See Diego Haz's Sandbox for making this logic work well on Safari/iOS:\n// https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/FocusTrap.tsx\n\nconst HIDDEN_STYLES = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'fixed',\n  whiteSpace: 'nowrap',\n  width: '1px',\n  top: 0,\n  left: 0\n};\nlet activeElement;\nlet timeoutId;\nfunction setActiveElementOnTab(event) {\n  if (event.key === 'Tab') {\n    activeElement = event.target;\n    clearTimeout(timeoutId);\n  }\n}\nfunction isTabFocus(event) {\n  const result = activeElement === event.relatedTarget;\n  activeElement = event.relatedTarget;\n  clearTimeout(timeoutId);\n  return result;\n}\nconst FocusGuard = /*#__PURE__*/React.forwardRef(function FocusGuard(props, ref) {\n  const onFocus = useEvent(props.onFocus);\n  const [role, setRole] = React.useState();\n  index(() => {\n    if (isSafari()) {\n      // Unlike other screen readers such as NVDA and JAWS, the virtual cursor\n      // on VoiceOver does trigger the onFocus event, so we can use the focus\n      // trap element. On Safari, only buttons trigger the onFocus event.\n      // NB: \"group\" role in the Sandbox no longer appears to work, must be a\n      // button role.\n      setRole('button');\n    }\n    document.addEventListener('keydown', setActiveElementOnTab);\n    return () => {\n      document.removeEventListener('keydown', setActiveElementOnTab);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, props, {\n    ref: ref,\n    tabIndex: 0\n    // Role is only for VoiceOver\n    ,\n    role: role,\n    \"aria-hidden\": role ? undefined : true,\n    \"data-floating-ui-focus-guard\": \"\",\n    style: HIDDEN_STYLES,\n    onFocus: event => {\n      if (isSafari() && isMac() && !isTabFocus(event)) {\n        // On macOS we need to wait a little bit before moving\n        // focus again.\n        event.persist();\n        timeoutId = window.setTimeout(() => {\n          onFocus(event);\n        }, 50);\n      } else {\n        onFocus(event);\n      }\n    }\n  }));\n});\n\nconst PortalContext = /*#__PURE__*/React.createContext(null);\nconst useFloatingPortalNode = function (_temp) {\n  let {\n    id,\n    enabled = true\n  } = _temp === void 0 ? {} : _temp;\n  const [portalEl, setPortalEl] = React.useState(null);\n  const uniqueId = useId();\n  const portalContext = usePortalContext();\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    const rootNode = id ? document.getElementById(id) : null;\n    if (rootNode) {\n      rootNode.setAttribute('data-floating-ui-portal', '');\n      setPortalEl(rootNode);\n    } else {\n      const newPortalEl = document.createElement('div');\n      if (id !== '') {\n        newPortalEl.id = id || uniqueId;\n      }\n      newPortalEl.setAttribute('data-floating-ui-portal', '');\n      setPortalEl(newPortalEl);\n      const container = (portalContext == null ? void 0 : portalContext.portalNode) || document.body;\n      container.appendChild(newPortalEl);\n      return () => {\n        container.removeChild(newPortalEl);\n      };\n    }\n  }, [id, portalContext, uniqueId, enabled]);\n  return portalEl;\n};\n\n/**\n * Portals the floating element into a given container element — by default,\n * outside of the app root and into the body.\n * @see https://floating-ui.com/docs/FloatingPortal\n */\nconst FloatingPortal = _ref => {\n  let {\n    children,\n    id,\n    root = null,\n    preserveTabOrder = true\n  } = _ref;\n  const portalNode = useFloatingPortalNode({\n    id,\n    enabled: !root\n  });\n  const [focusManagerState, setFocusManagerState] = React.useState(null);\n  const beforeOutsideRef = React.useRef(null);\n  const afterOutsideRef = React.useRef(null);\n  const beforeInsideRef = React.useRef(null);\n  const afterInsideRef = React.useRef(null);\n  const shouldRenderGuards =\n  // The FocusManager and therefore floating element are currently open/\n  // rendered.\n  !!focusManagerState &&\n  // Guards are only for non-modal focus management.\n  !focusManagerState.modal && !!(root || portalNode) && preserveTabOrder;\n\n  // https://codesandbox.io/s/tabbable-portal-f4tng?file=/src/TabbablePortal.tsx\n  React.useEffect(() => {\n    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {\n      return;\n    }\n\n    // Make sure elements inside the portal element are tabbable only when the\n    // portal has already been focused, either by tabbing into a focus trap\n    // element outside or using the mouse.\n    function onFocus(event) {\n      if (portalNode && isOutsideEvent(event)) {\n        const focusing = event.type === 'focusin';\n        const manageFocus = focusing ? enableFocusInside : disableFocusInside;\n        manageFocus(portalNode);\n      }\n    }\n    // Listen to the event on the capture phase so they run before the focus\n    // trap elements onFocus prop is called.\n    portalNode.addEventListener('focusin', onFocus, true);\n    portalNode.addEventListener('focusout', onFocus, true);\n    return () => {\n      portalNode.removeEventListener('focusin', onFocus, true);\n      portalNode.removeEventListener('focusout', onFocus, true);\n    };\n  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);\n  return /*#__PURE__*/React.createElement(PortalContext.Provider, {\n    value: React.useMemo(() => ({\n      preserveTabOrder,\n      beforeOutsideRef,\n      afterOutsideRef,\n      beforeInsideRef,\n      afterInsideRef,\n      portalNode,\n      setFocusManagerState\n    }), [preserveTabOrder, portalNode])\n  }, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: beforeOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _beforeInsideRef$curr;\n        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();\n      } else {\n        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        prevTabbable == null ? void 0 : prevTabbable.focus();\n      }\n    }\n  }), shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-owns\": portalNode.id,\n    style: HIDDEN_STYLES\n  }), root ? /*#__PURE__*/createPortal(children, root) : portalNode ? /*#__PURE__*/createPortal(children, portalNode) : null, shouldRenderGuards && portalNode && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"outside\",\n    ref: afterOutsideRef,\n    onFocus: event => {\n      if (isOutsideEvent(event, portalNode)) {\n        var _afterInsideRef$curre;\n        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();\n      } else {\n        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);\n        nextTabbable == null ? void 0 : nextTabbable.focus();\n        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));\n      }\n    }\n  }));\n};\nconst usePortalContext = () => React.useContext(PortalContext);\n\nconst VisuallyHiddenDismiss = /*#__PURE__*/React.forwardRef(function VisuallyHiddenDismiss(props, ref) {\n  return /*#__PURE__*/React.createElement(\"button\", _extends({}, props, {\n    type: \"button\",\n    ref: ref,\n    tabIndex: -1,\n    style: HIDDEN_STYLES\n  }));\n});\n/**\n * Provides focus management for the floating element.\n * @see https://floating-ui.com/docs/FloatingFocusManager\n */\nfunction FloatingFocusManager(_ref) {\n  let {\n    context,\n    children,\n    order = ['content'],\n    guards = true,\n    initialFocus = 0,\n    returnFocus = true,\n    modal = true,\n    visuallyHiddenDismiss = false,\n    closeOnFocusOut = true\n  } = _ref;\n  const {\n    refs,\n    nodeId,\n    onOpenChange,\n    events,\n    dataRef,\n    elements: {\n      domReference,\n      floating\n    }\n  } = context;\n  const orderRef = useLatestRef(order);\n  const tree = useFloatingTree();\n  const portalContext = usePortalContext();\n  const [tabbableContentLength, setTabbableContentLength] = React.useState(null);\n\n  // Controlled by `useListNavigation`.\n  const ignoreInitialFocus = typeof initialFocus === 'number' && initialFocus < 0;\n  const startDismissButtonRef = React.useRef(null);\n  const endDismissButtonRef = React.useRef(null);\n  const preventReturnFocusRef = React.useRef(false);\n  const previouslyFocusedElementRef = React.useRef(null);\n  const isPointerDownRef = React.useRef(false);\n  const isInsidePortal = portalContext != null;\n\n  // If the reference is a combobox and is typeable (e.g. input/textarea),\n  // there are different focus semantics. The guards should not be rendered, but\n  // aria-hidden should be applied to all nodes still. Further, the visually\n  // hidden dismiss button should only appear at the end of the list, not the\n  // start.\n  const isTypeableCombobox = domReference && domReference.getAttribute('role') === 'combobox' && isTypeableElement(domReference);\n  const getTabbableContent = React.useCallback(function (container) {\n    if (container === void 0) {\n      container = floating;\n    }\n    return container ? tabbable(container, getTabbableOptions()) : [];\n  }, [floating]);\n  const getTabbableElements = React.useCallback(container => {\n    const content = getTabbableContent(container);\n    return orderRef.current.map(type => {\n      if (domReference && type === 'reference') {\n        return domReference;\n      }\n      if (floating && type === 'floating') {\n        return floating;\n      }\n      return content;\n    }).filter(Boolean).flat();\n  }, [domReference, floating, orderRef, getTabbableContent]);\n  React.useEffect(() => {\n    if (!modal) {\n      return;\n    }\n    function onKeyDown(event) {\n      if (event.key === 'Tab') {\n        // The focus guards have nothing to focus, so we need to stop the event.\n        if (getTabbableContent().length === 0 && !isTypeableCombobox) {\n          stopEvent(event);\n        }\n        const els = getTabbableElements();\n        const target = getTarget(event);\n        if (orderRef.current[0] === 'reference' && target === domReference) {\n          stopEvent(event);\n          if (event.shiftKey) {\n            enqueueFocus(els[els.length - 1]);\n          } else {\n            enqueueFocus(els[1]);\n          }\n        }\n        if (orderRef.current[1] === 'floating' && target === floating && event.shiftKey) {\n          stopEvent(event);\n          enqueueFocus(els[0]);\n        }\n      }\n    }\n    const doc = getDocument(floating);\n    doc.addEventListener('keydown', onKeyDown);\n    return () => {\n      doc.removeEventListener('keydown', onKeyDown);\n    };\n  }, [domReference, floating, modal, orderRef, refs, isTypeableCombobox, getTabbableContent, getTabbableElements]);\n  React.useEffect(() => {\n    if (!closeOnFocusOut) {\n      return;\n    }\n\n    // In Safari, buttons lose focus when pressing them.\n    function handlePointerDown() {\n      isPointerDownRef.current = true;\n      setTimeout(() => {\n        isPointerDownRef.current = false;\n      });\n    }\n    function handleFocusOutside(event) {\n      const relatedTarget = event.relatedTarget;\n      const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute('data-floating-ui-focus-guard') || tree && (getChildren(tree.nodesRef.current, nodeId).find(node => {\n        var _node$context, _node$context2;\n        return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);\n      }) || getAncestors(tree.nodesRef.current, nodeId).find(node => {\n        var _node$context3, _node$context4;\n        return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;\n      })));\n\n      // Focus did not move inside the floating tree, and there are no tabbable\n      // portal guards to handle closing.\n      if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current &&\n      // Fix React 18 Strict Mode returnFocus due to double rendering.\n      relatedTarget !== previouslyFocusedElementRef.current) {\n        preventReturnFocusRef.current = true;\n        // On iOS VoiceOver, dismissing the nested submenu will cause the\n        // first item of the list to receive focus. Delaying it appears to fix\n        // the issue.\n        setTimeout(() => onOpenChange(false));\n      }\n    }\n    if (floating && isHTMLElement(domReference)) {\n      domReference.addEventListener('focusout', handleFocusOutside);\n      domReference.addEventListener('pointerdown', handlePointerDown);\n      !modal && floating.addEventListener('focusout', handleFocusOutside);\n      return () => {\n        domReference.removeEventListener('focusout', handleFocusOutside);\n        domReference.removeEventListener('pointerdown', handlePointerDown);\n        !modal && floating.removeEventListener('focusout', handleFocusOutside);\n      };\n    }\n  }, [domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);\n  React.useEffect(() => {\n    var _portalContext$portal;\n    // Don't hide portals nested within the parent portal.\n    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll('[data-floating-ui-portal]')) || []);\n    function getDismissButtons() {\n      return [startDismissButtonRef.current, endDismissButtonRef.current].filter(Boolean);\n    }\n    if (floating && modal) {\n      const insideNodes = [floating, ...portalNodes, ...getDismissButtons()];\n      const cleanup = hideOthers(orderRef.current.includes('reference') || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);\n      return () => {\n        cleanup();\n      };\n    }\n  }, [domReference, floating, modal, orderRef, portalContext, isTypeableCombobox]);\n  React.useEffect(() => {\n    if (modal && !guards && floating) {\n      const tabIndexValues = [];\n      const options = getTabbableOptions();\n      const allTabbable = tabbable(getDocument(floating).body, options);\n      const floatingTabbable = getTabbableElements();\n\n      // Exclude all tabbable elements that are part of the order\n      const elements = allTabbable.filter(el => !floatingTabbable.includes(el));\n      elements.forEach((el, i) => {\n        tabIndexValues[i] = el.getAttribute('tabindex');\n        el.setAttribute('tabindex', '-1');\n      });\n      return () => {\n        elements.forEach((el, i) => {\n          const value = tabIndexValues[i];\n          if (value == null) {\n            el.removeAttribute('tabindex');\n          } else {\n            el.setAttribute('tabindex', value);\n          }\n        });\n      };\n    }\n  }, [floating, modal, guards, getTabbableElements]);\n  index(() => {\n    if (!floating) return;\n    const doc = getDocument(floating);\n    let returnFocusValue = returnFocus;\n    let preventReturnFocusScroll = false;\n    const previouslyFocusedElement = activeElement$1(doc);\n    const contextData = dataRef.current;\n    previouslyFocusedElementRef.current = previouslyFocusedElement;\n    const focusableElements = getTabbableElements(floating);\n    const elToFocus = (typeof initialFocus === 'number' ? focusableElements[initialFocus] : initialFocus.current) || floating;\n\n    // If the `useListNavigation` hook is active, always ignore `initialFocus`\n    // because it has its own handling of the initial focus.\n    !ignoreInitialFocus && enqueueFocus(elToFocus, {\n      preventScroll: elToFocus === floating\n    });\n\n    // Dismissing via outside press should always ignore `returnFocus` to\n    // prevent unwanted scrolling.\n    function onDismiss(payload) {\n      if (payload.type === 'escapeKey' && refs.domReference.current) {\n        previouslyFocusedElementRef.current = refs.domReference.current;\n      }\n      if (['referencePress', 'escapeKey'].includes(payload.type)) {\n        return;\n      }\n      const returnFocus = payload.data.returnFocus;\n      if (typeof returnFocus === 'object') {\n        returnFocusValue = true;\n        preventReturnFocusScroll = returnFocus.preventScroll;\n      } else {\n        returnFocusValue = returnFocus;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n      if (contains(floating, activeElement$1(doc)) && refs.domReference.current) {\n        previouslyFocusedElementRef.current = refs.domReference.current;\n      }\n      if (returnFocusValue && isHTMLElement(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {\n        // `isPointerDownRef.current` to avoid the focus ring from appearing on\n        // the reference element when click-toggling it.\n        if (!refs.domReference.current || isPointerDownRef.current) {\n          enqueueFocus(previouslyFocusedElementRef.current, {\n            // When dismissing nested floating elements, by the time the rAF has\n            // executed, the menus will all have been unmounted. When they try\n            // to get focused, the calls get ignored — leaving the root\n            // reference focused as desired.\n            cancelPrevious: false,\n            preventScroll: preventReturnFocusScroll\n          });\n        } else {\n          var _previouslyFocusedEle;\n          // If the user has specified a `keydown` listener that calls\n          // setOpen(false) (e.g. selecting an item and closing the floating\n          // element), then sync return focus causes `useClick` to immediately\n          // re-open it, unless they call `event.preventDefault()` in the\n          // `keydown` listener. This helps keep backwards compatibility with\n          // older examples.\n          contextData.__syncReturnFocus = true;\n\n          // In Safari, `useListNavigation` moves focus sync, so making this\n          // sync ensures the initial item remains focused despite this being\n          // invoked in Strict Mode due to double-invoked useEffects. This also\n          // has the positive side effect of closing a modally focus-managed\n          // <Menu> on `Tab` keydown to move naturally to the next focusable\n          // element.\n          (_previouslyFocusedEle = previouslyFocusedElementRef.current) == null ? void 0 : _previouslyFocusedEle.focus({\n            preventScroll: preventReturnFocusScroll\n          });\n          setTimeout(() => {\n            // This isn't an actual property the user should access, make sure\n            // it doesn't persist.\n            delete contextData.__syncReturnFocus;\n          });\n        }\n      }\n    };\n  }, [floating, getTabbableElements, initialFocus, returnFocus, dataRef, refs, events, ignoreInitialFocus]);\n\n  // Synchronize the `context` & `modal` value to the FloatingPortal context.\n  // It will decide whether or not it needs to render its own guards.\n  index(() => {\n    if (!portalContext) return;\n    portalContext.setFocusManagerState({\n      ...context,\n      modal,\n      closeOnFocusOut\n      // Not concerned about the <RT> generic type.\n    });\n\n    return () => {\n      portalContext.setFocusManagerState(null);\n    };\n  }, [portalContext, modal, closeOnFocusOut, context]);\n  index(() => {\n    if (ignoreInitialFocus || !floating) return;\n    function setState() {\n      setTabbableContentLength(getTabbableContent().length);\n    }\n    setState();\n    if (typeof MutationObserver === 'function') {\n      const observer = new MutationObserver(setState);\n      observer.observe(floating, {\n        childList: true,\n        subtree: true\n      });\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [floating, getTabbableContent, ignoreInitialFocus, refs]);\n  const shouldRenderGuards = guards && (isInsidePortal || modal) && !isTypeableCombobox;\n  function renderDismissButton(location) {\n    return visuallyHiddenDismiss && modal ? /*#__PURE__*/React.createElement(VisuallyHiddenDismiss, {\n      ref: location === 'start' ? startDismissButtonRef : endDismissButtonRef,\n      onClick: () => onOpenChange(false)\n    }, typeof visuallyHiddenDismiss === 'string' ? visuallyHiddenDismiss : 'Dismiss') : null;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,\n    onFocus: event => {\n      if (modal) {\n        const els = getTabbableElements();\n        enqueueFocus(order[0] === 'reference' ? els[0] : els[els.length - 1]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = false;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const nextTabbable = getNextTabbable() || domReference;\n          nextTabbable == null ? void 0 : nextTabbable.focus();\n        } else {\n          var _portalContext$before;\n          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();\n        }\n      }\n    }\n  }), isTypeableCombobox ? null : renderDismissButton('start'), /*#__PURE__*/React.cloneElement(children, tabbableContentLength === 0 || order.includes('floating') ? {\n    tabIndex: 0\n  } : {}), renderDismissButton('end'), shouldRenderGuards && /*#__PURE__*/React.createElement(FocusGuard, {\n    \"data-type\": \"inside\",\n    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,\n    onFocus: event => {\n      if (modal) {\n        enqueueFocus(getTabbableElements()[0]);\n      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {\n        preventReturnFocusRef.current = true;\n        if (isOutsideEvent(event, portalContext.portalNode)) {\n          const prevTabbable = getPreviousTabbable() || domReference;\n          prevTabbable == null ? void 0 : prevTabbable.focus();\n        } else {\n          var _portalContext$afterO;\n          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();\n        }\n      }\n    }\n  }));\n}\n\nconst identifier = 'data-floating-ui-scroll-lock';\n\n/**\n * Provides base styling for a fixed overlay element to dim content or block\n * pointer events behind a floating element.\n * It's a regular `<div>`, so it can be styled via any CSS solution you prefer.\n * @see https://floating-ui.com/docs/FloatingOverlay\n */\nconst FloatingOverlay = /*#__PURE__*/React.forwardRef(function FloatingOverlay(_ref, ref) {\n  let {\n    lockScroll = false,\n    ...rest\n  } = _ref;\n  index(() => {\n    var _window$visualViewpor, _window$visualViewpor2;\n    if (!lockScroll) {\n      return;\n    }\n    const alreadyLocked = document.body.hasAttribute(identifier);\n    if (alreadyLocked) {\n      return;\n    }\n    document.body.setAttribute(identifier, '');\n\n    // RTL <body> scrollbar\n    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;\n    const paddingProp = scrollbarX ? 'paddingLeft' : 'paddingRight';\n    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;\n\n    // Only iOS doesn't respect `overflow: hidden` on document.body, and this\n    // technique has fewer side effects.\n    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {\n      Object.assign(document.body.style, {\n        overflow: 'hidden',\n        [paddingProp]: scrollbarWidth + \"px\"\n      });\n      return () => {\n        document.body.removeAttribute(identifier);\n        Object.assign(document.body.style, {\n          overflow: '',\n          [paddingProp]: ''\n        });\n      };\n    }\n\n    // iOS 12 does not support `visualViewport`.\n    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;\n    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;\n    const scrollX = window.pageXOffset;\n    const scrollY = window.pageYOffset;\n    Object.assign(document.body.style, {\n      position: 'fixed',\n      overflow: 'hidden',\n      top: -(scrollY - Math.floor(offsetTop)) + \"px\",\n      left: -(scrollX - Math.floor(offsetLeft)) + \"px\",\n      right: '0',\n      [paddingProp]: scrollbarWidth + \"px\"\n    });\n    return () => {\n      Object.assign(document.body.style, {\n        position: '',\n        overflow: '',\n        top: '',\n        left: '',\n        right: '',\n        [paddingProp]: ''\n      });\n      document.body.removeAttribute(identifier);\n      window.scrollTo(scrollX, scrollY);\n    };\n  }, [lockScroll]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    style: {\n      position: 'fixed',\n      overflow: 'auto',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...rest.style\n    }\n  }));\n});\n\nfunction isButtonTarget(event) {\n  return isHTMLElement(event.target) && event.target.tagName === 'BUTTON';\n}\nfunction isSpaceIgnored(element) {\n  return isTypeableElement(element);\n}\n/**\n * Opens or closes the floating element when clicking the reference element.\n * @see https://floating-ui.com/docs/useClick\n */\nconst useClick = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    dataRef,\n    elements: {\n      domReference\n    }\n  } = _ref;\n  let {\n    enabled = true,\n    event: eventOption = 'click',\n    toggle = true,\n    ignoreMouse = false,\n    keyboardHandlers = true\n  } = _temp === void 0 ? {} : _temp;\n  const pointerTypeRef = React.useRef();\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        onPointerDown(event) {\n          pointerTypeRef.current = event.pointerType;\n        },\n        onMouseDown(event) {\n          // Ignore all buttons except for the \"main\" button.\n          // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n          if (event.button !== 0) {\n            return;\n          }\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\n            return;\n          }\n          if (eventOption === 'click') {\n            return;\n          }\n          if (open) {\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'mousedown' : true)) {\n              onOpenChange(false);\n            }\n          } else {\n            // Prevent stealing focus from the floating element\n            event.preventDefault();\n            onOpenChange(true);\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n        },\n        onClick(event) {\n          if (dataRef.current.__syncReturnFocus) {\n            return;\n          }\n          if (eventOption === 'mousedown' && pointerTypeRef.current) {\n            pointerTypeRef.current = undefined;\n            return;\n          }\n          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {\n            return;\n          }\n          if (open) {\n            if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === 'click' : true)) {\n              onOpenChange(false);\n            }\n          } else {\n            onOpenChange(true);\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n        },\n        onKeyDown(event) {\n          pointerTypeRef.current = undefined;\n          if (!keyboardHandlers) {\n            return;\n          }\n          if (isButtonTarget(event)) {\n            return;\n          }\n          if (event.key === ' ' && !isSpaceIgnored(domReference)) {\n            // Prevent scrolling\n            event.preventDefault();\n          }\n          if (event.key === 'Enter') {\n            if (open) {\n              if (toggle) {\n                onOpenChange(false);\n              }\n            } else {\n              onOpenChange(true);\n            }\n          }\n        },\n        onKeyUp(event) {\n          if (!keyboardHandlers) {\n            return;\n          }\n          if (isButtonTarget(event) || isSpaceIgnored(domReference)) {\n            return;\n          }\n          if (event.key === ' ') {\n            if (open) {\n              if (toggle) {\n                onOpenChange(false);\n              }\n            } else {\n              onOpenChange(true);\n            }\n          }\n        }\n      }\n    };\n  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);\n};\n\n/**\n * Check whether the event.target is within the provided node. Uses event.composedPath if available for custom element support.\n *\n * @param event The event whose target/composedPath to check\n * @param node The node to check against\n * @returns Whether the event.target/composedPath is within the node.\n */\nfunction isEventTargetWithin(event, node) {\n  if (node == null) {\n    return false;\n  }\n  if ('composedPath' in event) {\n    return event.composedPath().includes(node);\n  }\n\n  // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\n  const e = event;\n  return e.target != null && node.contains(e.target);\n}\n\nconst bubbleHandlerKeys = {\n  pointerdown: 'onPointerDown',\n  mousedown: 'onMouseDown',\n  click: 'onClick'\n};\nconst captureHandlerKeys = {\n  pointerdown: 'onPointerDownCapture',\n  mousedown: 'onMouseDownCapture',\n  click: 'onClickCapture'\n};\nconst normalizeBubblesProp = function (bubbles) {\n  var _bubbles$escapeKey, _bubbles$outsidePress;\n  if (bubbles === void 0) {\n    bubbles = true;\n  }\n  return {\n    escapeKeyBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,\n    outsidePressBubbles: typeof bubbles === 'boolean' ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true\n  };\n};\n/**\n * Closes the floating element when a dismissal is requested — by default, when\n * the user presses the `escape` key or outside of the floating element.\n * @see https://floating-ui.com/docs/useDismiss\n */\nconst useDismiss = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    events,\n    nodeId,\n    elements: {\n      reference,\n      domReference,\n      floating\n    },\n    dataRef\n  } = _ref;\n  let {\n    enabled = true,\n    escapeKey = true,\n    outsidePress: unstable_outsidePress = true,\n    outsidePressEvent = 'pointerdown',\n    referencePress = false,\n    referencePressEvent = 'pointerdown',\n    ancestorScroll = false,\n    bubbles = true\n  } = _temp === void 0 ? {} : _temp;\n  const tree = useFloatingTree();\n  const nested = useFloatingParentNodeId() != null;\n  const outsidePressFn = useEvent(typeof unstable_outsidePress === 'function' ? unstable_outsidePress : () => false);\n  const outsidePress = typeof unstable_outsidePress === 'function' ? outsidePressFn : unstable_outsidePress;\n  const insideReactTreeRef = React.useRef(false);\n  const {\n    escapeKeyBubbles,\n    outsidePressBubbles\n  } = normalizeBubblesProp(bubbles);\n  React.useEffect(() => {\n    if (!open || !enabled) {\n      return;\n    }\n    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;\n    dataRef.current.__outsidePressBubbles = outsidePressBubbles;\n    function onKeyDown(event) {\n      if (event.key === 'Escape') {\n        const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n        if (children.length > 0) {\n          let shouldDismiss = true;\n          children.forEach(child => {\n            var _child$context;\n            if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {\n              shouldDismiss = false;\n              return;\n            }\n          });\n          if (!shouldDismiss) {\n            return;\n          }\n        }\n        events.emit('dismiss', {\n          type: 'escapeKey',\n          data: {\n            returnFocus: {\n              preventScroll: false\n            }\n          }\n        });\n        onOpenChange(false);\n      }\n    }\n    function onOutsidePress(event) {\n      // Given developers can stop the propagation of the synthetic event,\n      // we can only be confident with a positive value.\n      const insideReactTree = insideReactTreeRef.current;\n      insideReactTreeRef.current = false;\n      if (insideReactTree) {\n        return;\n      }\n      if (typeof outsidePress === 'function' && !outsidePress(event)) {\n        return;\n      }\n      const target = getTarget(event);\n\n      // Check if the click occurred on the scrollbar\n      if (isHTMLElement(target) && floating) {\n        const win = floating.ownerDocument.defaultView || window;\n        const canScrollX = target.scrollWidth > target.clientWidth;\n        const canScrollY = target.scrollHeight > target.clientHeight;\n        let xCond = canScrollY && event.offsetX > target.clientWidth;\n\n        // In some browsers it is possible to change the <body> (or window)\n        // scrollbar to the left side, but is very rare and is difficult to\n        // check for. Plus, for modal dialogs with backdrops, it is more\n        // important that the backdrop is checked but not so much the window.\n        if (canScrollY) {\n          const isRTL = win.getComputedStyle(target).direction === 'rtl';\n          if (isRTL) {\n            xCond = event.offsetX <= target.offsetWidth - target.clientWidth;\n          }\n        }\n        if (xCond || canScrollX && event.offsetY > target.clientHeight) {\n          return;\n        }\n      }\n      const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some(node => {\n        var _node$context;\n        return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);\n      });\n      if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {\n        return;\n      }\n      const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];\n      if (children.length > 0) {\n        let shouldDismiss = true;\n        children.forEach(child => {\n          var _child$context2;\n          if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {\n            shouldDismiss = false;\n            return;\n          }\n        });\n        if (!shouldDismiss) {\n          return;\n        }\n      }\n      events.emit('dismiss', {\n        type: 'outsidePress',\n        data: {\n          returnFocus: nested ? {\n            preventScroll: true\n          } : isVirtualClick(event) || isVirtualPointerEvent(event)\n        }\n      });\n      onOpenChange(false);\n    }\n    function onScroll() {\n      onOpenChange(false);\n    }\n    const doc = getDocument(floating);\n    escapeKey && doc.addEventListener('keydown', onKeyDown);\n    outsidePress && doc.addEventListener(outsidePressEvent, onOutsidePress);\n    let ancestors = [];\n    if (ancestorScroll) {\n      if (isElement(domReference)) {\n        ancestors = getOverflowAncestors(domReference);\n      }\n      if (isElement(floating)) {\n        ancestors = ancestors.concat(getOverflowAncestors(floating));\n      }\n      if (!isElement(reference) && reference && reference.contextElement) {\n        ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));\n      }\n    }\n\n    // Ignore the visual viewport for scrolling dismissal (allow pinch-zoom)\n    ancestors = ancestors.filter(ancestor => {\n      var _doc$defaultView;\n      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);\n    });\n    ancestors.forEach(ancestor => {\n      ancestor.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    });\n    return () => {\n      escapeKey && doc.removeEventListener('keydown', onKeyDown);\n      outsidePress && doc.removeEventListener(outsidePressEvent, onOutsidePress);\n      ancestors.forEach(ancestor => {\n        ancestor.removeEventListener('scroll', onScroll);\n      });\n    };\n  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, events, tree, nodeId, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, nested]);\n  React.useEffect(() => {\n    insideReactTreeRef.current = false;\n  }, [outsidePress, outsidePressEvent]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        [bubbleHandlerKeys[referencePressEvent]]: () => {\n          if (referencePress) {\n            events.emit('dismiss', {\n              type: 'referencePress',\n              data: {\n                returnFocus: false\n              }\n            });\n            onOpenChange(false);\n          }\n        }\n      },\n      floating: {\n        [captureHandlerKeys[outsidePressEvent]]: () => {\n          insideReactTreeRef.current = true;\n        }\n      }\n    };\n  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange]);\n};\n\n/**\n * Opens the floating element while the reference element has focus, like CSS\n * `:focus`.\n * @see https://floating-ui.com/docs/useFocus\n */\nconst useFocus = function (_ref, _temp) {\n  let {\n    open,\n    onOpenChange,\n    dataRef,\n    events,\n    refs,\n    elements: {\n      floating,\n      domReference\n    }\n  } = _ref;\n  let {\n    enabled = true,\n    keyboardOnly = true\n  } = _temp === void 0 ? {} : _temp;\n  const pointerTypeRef = React.useRef('');\n  const blockFocusRef = React.useRef(false);\n  const timeoutRef = React.useRef();\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const doc = getDocument(floating);\n    const win = doc.defaultView || window;\n\n    // If the reference was focused and the user left the tab/window, and the\n    // floating element was not open, the focus should be blocked when they\n    // return to the tab/window.\n    function onBlur() {\n      if (!open && isHTMLElement(domReference) && domReference === activeElement$1(getDocument(domReference))) {\n        blockFocusRef.current = true;\n      }\n    }\n    win.addEventListener('blur', onBlur);\n    return () => {\n      win.removeEventListener('blur', onBlur);\n    };\n  }, [floating, domReference, open, enabled]);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onDismiss(payload) {\n      if (payload.type === 'referencePress' || payload.type === 'escapeKey') {\n        blockFocusRef.current = true;\n      }\n    }\n    events.on('dismiss', onDismiss);\n    return () => {\n      events.off('dismiss', onDismiss);\n    };\n  }, [events, enabled]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      reference: {\n        onPointerDown(_ref2) {\n          let {\n            pointerType\n          } = _ref2;\n          pointerTypeRef.current = pointerType;\n          blockFocusRef.current = !!(pointerType && keyboardOnly);\n        },\n        onMouseLeave() {\n          blockFocusRef.current = false;\n        },\n        onFocus(event) {\n          var _dataRef$current$open;\n          if (blockFocusRef.current) {\n            return;\n          }\n\n          // Dismiss with click should ignore the subsequent `focus` trigger,\n          // but only if the click originated inside the reference element.\n          if (event.type === 'focus' && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === 'mousedown' && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {\n            return;\n          }\n          dataRef.current.openEvent = event.nativeEvent;\n          onOpenChange(true);\n        },\n        onBlur(event) {\n          blockFocusRef.current = false;\n          const relatedTarget = event.relatedTarget;\n\n          // Hit the non-modal focus management portal guard. Focus will be\n          // moved into the floating element immediately after.\n          const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute('data-floating-ui-focus-guard') && relatedTarget.getAttribute('data-type') === 'outside';\n\n          // Wait for the window blur listener to fire.\n          timeoutRef.current = setTimeout(() => {\n            // When focusing the reference element (e.g. regular click), then\n            // clicking into the floating element, prevent it from hiding.\n            // Note: it must be focusable, e.g. `tabindex=\"-1\"`.\n            if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {\n              return;\n            }\n            onOpenChange(false);\n          });\n        }\n      }\n    };\n  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);\n};\n\nlet isPreventScrollSupported = false;\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_LEFT = 'ArrowLeft';\nconst ARROW_RIGHT = 'ArrowRight';\nfunction isDifferentRow(index, cols, prevRow) {\n  return Math.floor(index / cols) !== prevRow;\n}\nfunction isIndexOutOfBounds(listRef, index) {\n  return index < 0 || index >= listRef.current.length;\n}\nfunction findNonDisabledIndex(listRef, _temp) {\n  let {\n    startingIndex = -1,\n    decrement = false,\n    disabledIndices,\n    amount = 1\n  } = _temp === void 0 ? {} : _temp;\n  const list = listRef.current;\n  let index = startingIndex;\n  do {\n    var _list$index, _list$index2;\n    index = index + (decrement ? -amount : amount);\n  } while (index >= 0 && index <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index) : list[index] == null || ((_list$index = list[index]) == null ? void 0 : _list$index.hasAttribute('disabled')) || ((_list$index2 = list[index]) == null ? void 0 : _list$index2.getAttribute('aria-disabled')) === 'true'));\n  return index;\n}\nfunction doSwitch(orientation, vertical, horizontal) {\n  switch (orientation) {\n    case 'vertical':\n      return vertical;\n    case 'horizontal':\n      return horizontal;\n    default:\n      return vertical || horizontal;\n  }\n}\nfunction isMainOrientationKey(key, orientation) {\n  const vertical = key === ARROW_UP || key === ARROW_DOWN;\n  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isMainOrientationToEndKey(key, orientation, rtl) {\n  const vertical = key === ARROW_DOWN;\n  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  return doSwitch(orientation, vertical, horizontal) || key === 'Enter' || key == ' ' || key === '';\n}\nfunction isCrossOrientationOpenKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;\n  const horizontal = key === ARROW_DOWN;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction isCrossOrientationCloseKey(key, orientation, rtl) {\n  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;\n  const horizontal = key === ARROW_UP;\n  return doSwitch(orientation, vertical, horizontal);\n}\nfunction getMinIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    disabledIndices\n  });\n}\nfunction getMaxIndex(listRef, disabledIndices) {\n  return findNonDisabledIndex(listRef, {\n    decrement: true,\n    startingIndex: listRef.current.length,\n    disabledIndices\n  });\n}\n/**\n * Adds arrow key-based navigation of a list of items, either using real DOM\n * focus or virtual focus.\n * @see https://floating-ui.com/docs/useListNavigation\n */\nconst useListNavigation = function (_ref, _temp2) {\n  let {\n    open,\n    onOpenChange,\n    refs,\n    elements: {\n      domReference\n    }\n  } = _ref;\n  let {\n    listRef,\n    activeIndex,\n    onNavigate: unstable_onNavigate = () => {},\n    enabled = true,\n    selectedIndex = null,\n    allowEscape = false,\n    loop = false,\n    nested = false,\n    rtl = false,\n    virtual = false,\n    focusItemOnOpen = 'auto',\n    focusItemOnHover = true,\n    openOnArrowKeyDown = true,\n    disabledIndices = undefined,\n    orientation = 'vertical',\n    cols = 1,\n    scrollItemIntoView = true\n  } = _temp2 === void 0 ? {\n    listRef: {\n      current: []\n    },\n    activeIndex: null,\n    onNavigate: () => {}\n  } : _temp2;\n  if (process.env.NODE_ENV !== \"production\") {\n    if (allowEscape) {\n      if (!loop) {\n        console.warn(['Floating UI: `useListNavigation` looping must be enabled to allow', 'escaping.'].join(' '));\n      }\n      if (!virtual) {\n        console.warn(['Floating UI: `useListNavigation` must be virtual to allow', 'escaping.'].join(' '));\n      }\n    }\n    if (orientation === 'vertical' && cols > 1) {\n      console.warn(['Floating UI: In grid list navigation mode (`cols` > 1), the', '`orientation` should be either \"horizontal\" or \"both\".'].join(' '));\n    }\n  }\n  const parentId = useFloatingParentNodeId();\n  const tree = useFloatingTree();\n  const onNavigate = useEvent(unstable_onNavigate);\n  const focusItemOnOpenRef = React.useRef(focusItemOnOpen);\n  const indexRef = React.useRef(selectedIndex != null ? selectedIndex : -1);\n  const keyRef = React.useRef(null);\n  const isPointerModalityRef = React.useRef(true);\n  const previousOnNavigateRef = React.useRef(onNavigate);\n  const previousOpenRef = React.useRef(open);\n  const forceSyncFocus = React.useRef(false);\n  const forceScrollIntoViewRef = React.useRef(false);\n  const disabledIndicesRef = useLatestRef(disabledIndices);\n  const latestOpenRef = useLatestRef(open);\n  const scrollItemIntoViewRef = useLatestRef(scrollItemIntoView);\n  const [activeId, setActiveId] = React.useState();\n  const focusItem = React.useCallback(function (listRef, indexRef, forceScrollIntoView) {\n    if (forceScrollIntoView === void 0) {\n      forceScrollIntoView = false;\n    }\n    const item = listRef.current[indexRef.current];\n    if (virtual) {\n      setActiveId(item == null ? void 0 : item.id);\n    } else {\n      enqueueFocus(item, {\n        preventScroll: true,\n        // Mac Safari does not move the virtual cursor unless the focus call\n        // is sync. However, for the very first focus call, we need to wait\n        // for the position to be ready in order to prevent unwanted\n        // scrolling. This means the virtual cursor will not move to the first\n        // item when first opening the floating element, but will on\n        // subsequent calls. `preventScroll` is supported in modern Safari,\n        // so we can use that instead.\n        // iOS Safari must be async or the first item will not be focused.\n        sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false\n      });\n    }\n    requestAnimationFrame(() => {\n      const scrollIntoViewOptions = scrollItemIntoViewRef.current;\n      const shouldScrollIntoView = scrollIntoViewOptions && item && (forceScrollIntoView || !isPointerModalityRef.current);\n      if (shouldScrollIntoView) {\n        // JSDOM doesn't support `.scrollIntoView()` but it's widely supported\n        // by all browsers.\n        item.scrollIntoView == null ? void 0 : item.scrollIntoView(typeof scrollIntoViewOptions === 'boolean' ? {\n          block: 'nearest',\n          inline: 'nearest'\n        } : scrollIntoViewOptions);\n      }\n    });\n  }, [virtual, scrollItemIntoViewRef]);\n  index(() => {\n    document.createElement('div').focus({\n      get preventScroll() {\n        isPreventScrollSupported = true;\n        return false;\n      }\n    });\n  }, []);\n\n  // Sync `selectedIndex` to be the `activeIndex` upon opening the floating\n  // element. Also, reset `activeIndex` upon closing the floating element.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (open) {\n      if (focusItemOnOpenRef.current && selectedIndex != null) {\n        // Regardless of the pointer modality, we want to ensure the selected\n        // item comes into view when the floating element is opened.\n        forceScrollIntoViewRef.current = true;\n        onNavigate(selectedIndex);\n      }\n    } else if (previousOpenRef.current) {\n      // Since the user can specify `onNavigate` conditionally\n      // (onNavigate: open ? setActiveIndex : setSelectedIndex),\n      // we store and call the previous function.\n      indexRef.current = -1;\n      previousOnNavigateRef.current(null);\n    }\n  }, [enabled, open, selectedIndex, onNavigate]);\n\n  // Sync `activeIndex` to be the focused item while the floating element is\n  // open.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (open) {\n      if (activeIndex == null) {\n        forceSyncFocus.current = false;\n        if (selectedIndex != null) {\n          return;\n        }\n\n        // Reset while the floating element was open (e.g. the list changed).\n        if (previousOpenRef.current) {\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n        }\n\n        // Initial sync.\n        if (!previousOpenRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {\n          indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);\n          onNavigate(indexRef.current);\n        }\n      } else if (!isIndexOutOfBounds(listRef, activeIndex)) {\n        indexRef.current = activeIndex;\n        focusItem(listRef, indexRef, forceScrollIntoViewRef.current);\n        forceScrollIntoViewRef.current = false;\n      }\n    }\n  }, [enabled, open, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);\n\n  // Ensure the parent floating element has focus when a nested child closes\n  // to allow arrow key navigation to work after the pointer leaves the child.\n  index(() => {\n    if (!enabled) {\n      return;\n    }\n    if (previousOpenRef.current && !open) {\n      var _tree$nodesRef$curren, _tree$nodesRef$curren2;\n      const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find(node => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;\n      if (parentFloating && !contains(parentFloating, activeElement$1(getDocument(parentFloating)))) {\n        parentFloating.focus({\n          preventScroll: true\n        });\n      }\n    }\n  }, [enabled, open, tree, parentId]);\n  index(() => {\n    keyRef.current = null;\n    previousOnNavigateRef.current = onNavigate;\n    previousOpenRef.current = open;\n  });\n  const hasActiveIndex = activeIndex != null;\n  const item = React.useMemo(() => {\n    function syncCurrentTarget(currentTarget) {\n      if (!open) return;\n      const index = listRef.current.indexOf(currentTarget);\n      if (index !== -1) {\n        onNavigate(index);\n      }\n    }\n    const props = {\n      onFocus(_ref2) {\n        let {\n          currentTarget\n        } = _ref2;\n        syncCurrentTarget(currentTarget);\n      },\n      onClick: _ref3 => {\n        let {\n          currentTarget\n        } = _ref3;\n        return currentTarget.focus({\n          preventScroll: true\n        });\n      },\n      // Safari\n      ...(focusItemOnHover && {\n        onMouseMove(_ref4) {\n          let {\n            currentTarget\n          } = _ref4;\n          syncCurrentTarget(currentTarget);\n        },\n        onPointerLeave() {\n          if (!isPointerModalityRef.current) {\n            return;\n          }\n          indexRef.current = -1;\n          focusItem(listRef, indexRef);\n\n          // Virtual cursor with VoiceOver on iOS needs this to be flushed\n          // synchronously or there is a glitch that prevents nested\n          // submenus from being accessible.\n          flushSync(() => onNavigate(null));\n          if (!virtual) {\n            var _refs$floating$curren;\n            // This also needs to be sync to prevent fast mouse movements\n            // from leaving behind a stale active item when landing on a\n            // disabled button item.\n            (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({\n              preventScroll: true\n            });\n          }\n        }\n      })\n    };\n    return props;\n  }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    const disabledIndices = disabledIndicesRef.current;\n    function onKeyDown(event) {\n      isPointerModalityRef.current = false;\n      forceSyncFocus.current = true;\n\n      // If the floating element is animating out, ignore navigation. Otherwise,\n      // the `activeIndex` gets set to 0 despite not being open so the next time\n      // the user ArrowDowns, the first item won't be focused.\n      if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {\n        return;\n      }\n      if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {\n        stopEvent(event);\n        onOpenChange(false);\n        if (isHTMLElement(domReference)) {\n          domReference.focus();\n        }\n        return;\n      }\n      const currentIndex = indexRef.current;\n      const minIndex = getMinIndex(listRef, disabledIndices);\n      const maxIndex = getMaxIndex(listRef, disabledIndices);\n      if (event.key === 'Home') {\n        indexRef.current = minIndex;\n        onNavigate(indexRef.current);\n      }\n      if (event.key === 'End') {\n        indexRef.current = maxIndex;\n        onNavigate(indexRef.current);\n      }\n\n      // Grid navigation.\n      if (cols > 1) {\n        const prevIndex = indexRef.current;\n        if (event.key === ARROW_UP) {\n          stopEvent(event);\n          if (prevIndex === -1) {\n            indexRef.current = maxIndex;\n          } else {\n            indexRef.current = findNonDisabledIndex(listRef, {\n              startingIndex: prevIndex,\n              amount: cols,\n              decrement: true,\n              disabledIndices\n            });\n            if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {\n              const col = prevIndex % cols;\n              const maxCol = maxIndex % cols;\n              const offset = maxIndex - (maxCol - col);\n              if (maxCol === col) {\n                indexRef.current = maxIndex;\n              } else {\n                indexRef.current = maxCol > col ? offset : offset - cols;\n              }\n            }\n          }\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            indexRef.current = prevIndex;\n          }\n          onNavigate(indexRef.current);\n        }\n        if (event.key === ARROW_DOWN) {\n          stopEvent(event);\n          if (prevIndex === -1) {\n            indexRef.current = minIndex;\n          } else {\n            indexRef.current = findNonDisabledIndex(listRef, {\n              startingIndex: prevIndex,\n              amount: cols,\n              disabledIndices\n            });\n            if (loop && prevIndex + cols > maxIndex) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex % cols - cols,\n                amount: cols,\n                disabledIndices\n              });\n            }\n          }\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            indexRef.current = prevIndex;\n          }\n          onNavigate(indexRef.current);\n        }\n\n        // Remains on the same row/column.\n        if (orientation === 'both') {\n          const prevRow = Math.floor(prevIndex / cols);\n          if (event.key === ARROW_RIGHT) {\n            stopEvent(event);\n            if (prevIndex % cols !== cols - 1) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex,\n                disabledIndices\n              });\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\n                indexRef.current = findNonDisabledIndex(listRef, {\n                  startingIndex: prevIndex - prevIndex % cols - 1,\n                  disabledIndices\n                });\n              }\n            } else if (loop) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex - prevIndex % cols - 1,\n                disabledIndices\n              });\n            }\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\n              indexRef.current = prevIndex;\n            }\n          }\n          if (event.key === ARROW_LEFT) {\n            stopEvent(event);\n            if (prevIndex % cols !== 0) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex,\n                disabledIndices,\n                decrement: true\n              });\n              if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {\n                indexRef.current = findNonDisabledIndex(listRef, {\n                  startingIndex: prevIndex + (cols - prevIndex % cols),\n                  decrement: true,\n                  disabledIndices\n                });\n              }\n            } else if (loop) {\n              indexRef.current = findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex + (cols - prevIndex % cols),\n                decrement: true,\n                disabledIndices\n              });\n            }\n            if (isDifferentRow(indexRef.current, cols, prevRow)) {\n              indexRef.current = prevIndex;\n            }\n          }\n          const lastRow = Math.floor(maxIndex / cols) === prevRow;\n          if (isIndexOutOfBounds(listRef, indexRef.current)) {\n            if (loop && lastRow) {\n              indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {\n                startingIndex: prevIndex - prevIndex % cols - 1,\n                disabledIndices\n              });\n            } else {\n              indexRef.current = prevIndex;\n            }\n          }\n          onNavigate(indexRef.current);\n          return;\n        }\n      }\n      if (isMainOrientationKey(event.key, orientation)) {\n        stopEvent(event);\n\n        // Reset the index if no item is focused.\n        if (open && !virtual && activeElement$1(event.currentTarget.ownerDocument) === event.currentTarget) {\n          indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;\n          onNavigate(indexRef.current);\n          return;\n        }\n        if (isMainOrientationToEndKey(event.key, orientation, rtl)) {\n          if (loop) {\n            indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              disabledIndices\n            });\n          } else {\n            indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              disabledIndices\n            }));\n          }\n        } else {\n          if (loop) {\n            indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              decrement: true,\n              disabledIndices\n            });\n          } else {\n            indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {\n              startingIndex: currentIndex,\n              decrement: true,\n              disabledIndices\n            }));\n          }\n        }\n        if (isIndexOutOfBounds(listRef, indexRef.current)) {\n          onNavigate(null);\n        } else {\n          onNavigate(indexRef.current);\n        }\n      }\n    }\n    function checkVirtualMouse(event) {\n      if (focusItemOnOpen === 'auto' && isVirtualClick(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    function checkVirtualPointer(event) {\n      // `pointerdown` fires first, reset the state then perform the checks.\n      focusItemOnOpenRef.current = focusItemOnOpen;\n      if (focusItemOnOpen === 'auto' && isVirtualPointerEvent(event.nativeEvent)) {\n        focusItemOnOpenRef.current = true;\n      }\n    }\n    const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {\n      'aria-activedescendant': activeId\n    };\n    return {\n      reference: {\n        ...ariaActiveDescendantProp,\n        onKeyDown(event) {\n          isPointerModalityRef.current = false;\n          const isArrowKey = event.key.indexOf('Arrow') === 0;\n          if (virtual && open) {\n            return onKeyDown(event);\n          }\n\n          // If a floating element should not open on arrow key down, avoid\n          // setting `activeIndex` while it's closed.\n          if (!open && !openOnArrowKeyDown && isArrowKey) {\n            return;\n          }\n          const isNavigationKey = isArrowKey || event.key === 'Enter' || event.key === ' ' || event.key === '';\n          if (isNavigationKey) {\n            keyRef.current = event.key;\n          }\n          if (nested) {\n            if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {\n              stopEvent(event);\n              if (open) {\n                indexRef.current = getMinIndex(listRef, disabledIndices);\n                onNavigate(indexRef.current);\n              } else {\n                onOpenChange(true);\n              }\n            }\n            return;\n          }\n          if (isMainOrientationKey(event.key, orientation)) {\n            if (selectedIndex != null) {\n              indexRef.current = selectedIndex;\n            }\n            stopEvent(event);\n            if (!open && openOnArrowKeyDown) {\n              onOpenChange(true);\n            } else {\n              onKeyDown(event);\n            }\n            if (open) {\n              onNavigate(indexRef.current);\n            }\n          }\n        },\n        onFocus() {\n          if (open) {\n            onNavigate(null);\n          }\n        },\n        onPointerDown: checkVirtualPointer,\n        onMouseDown: checkVirtualMouse,\n        onClick: checkVirtualMouse\n      },\n      floating: {\n        'aria-orientation': orientation === 'both' ? undefined : orientation,\n        ...ariaActiveDescendantProp,\n        onKeyDown,\n        onPointerMove() {\n          isPointerModalityRef.current = true;\n        }\n      },\n      item\n    };\n  }, [domReference, refs, activeId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item]);\n};\n\n/**\n * Merges an array of refs into a single memoized callback ref or `null`.\n * @see https://floating-ui.com/docs/useMergeRefs\n */\nfunction useMergeRefs(refs) {\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return value => {\n      refs.forEach(ref => {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref != null) {\n          ref.current = value;\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n/**\n * Adds base screen reader props to the reference and floating elements for a\n * given floating element `role`.\n * @see https://floating-ui.com/docs/useRole\n */\nconst useRole = function (_ref, _temp) {\n  let {\n    open\n  } = _ref;\n  let {\n    enabled = true,\n    role = 'dialog'\n  } = _temp === void 0 ? {} : _temp;\n  const rootId = useId();\n  const referenceId = useId();\n  return React.useMemo(() => {\n    const floatingProps = {\n      id: rootId,\n      role\n    };\n    if (!enabled) {\n      return {};\n    }\n    if (role === 'tooltip') {\n      return {\n        reference: {\n          'aria-describedby': open ? rootId : undefined\n        },\n        floating: floatingProps\n      };\n    }\n    return {\n      reference: {\n        'aria-expanded': open ? 'true' : 'false',\n        'aria-haspopup': role === 'alertdialog' ? 'dialog' : role,\n        'aria-controls': open ? rootId : undefined,\n        ...(role === 'listbox' && {\n          role: 'combobox'\n        }),\n        ...(role === 'menu' && {\n          id: referenceId\n        })\n      },\n      floating: {\n        ...floatingProps,\n        ...(role === 'menu' && {\n          'aria-labelledby': referenceId\n        })\n      }\n    };\n  }, [enabled, role, open, rootId, referenceId]);\n};\n\n// Converts a JS style key like `backgroundColor` to a CSS transition-property\n// like `background-color`.\nconst camelCaseToKebabCase = str => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? '-' : '') + $.toLowerCase());\nfunction useDelayUnmount(open, durationMs) {\n  const [isMounted, setIsMounted] = React.useState(open);\n  if (open && !isMounted) {\n    setIsMounted(true);\n  }\n  React.useEffect(() => {\n    if (!open) {\n      const timeout = setTimeout(() => setIsMounted(false), durationMs);\n      return () => clearTimeout(timeout);\n    }\n  }, [open, durationMs]);\n  return isMounted;\n}\n/**\n * Provides a status string to apply CSS transitions to a floating element,\n * correctly handling placement-aware transitions.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstatus\n */\nfunction useTransitionStatus(_ref, _temp) {\n  let {\n    open,\n    elements: {\n      floating\n    }\n  } = _ref;\n  let {\n    duration = 250\n  } = _temp === void 0 ? {} : _temp;\n  const isNumberDuration = typeof duration === 'number';\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  const [initiated, setInitiated] = React.useState(false);\n  const [status, setStatus] = React.useState('unmounted');\n  const isMounted = useDelayUnmount(open, closeDuration);\n\n  // `initiated` check prevents this `setState` call from breaking\n  // <FloatingPortal />. This call is necessary to ensure subsequent opens\n  // after the initial one allows the correct side animation to play when the\n  // placement has changed.\n  index(() => {\n    if (initiated && !isMounted) {\n      setStatus('unmounted');\n    }\n  }, [initiated, isMounted]);\n  index(() => {\n    if (!floating) return;\n    if (open) {\n      setStatus('initial');\n      const frame = requestAnimationFrame(() => {\n        setStatus('open');\n      });\n      return () => {\n        cancelAnimationFrame(frame);\n      };\n    } else {\n      setInitiated(true);\n      setStatus('close');\n    }\n  }, [open, floating]);\n  return {\n    isMounted,\n    status\n  };\n}\n/**\n * Provides styles to apply CSS transitions to a floating element, correctly\n * handling placement-aware transitions. Wrapper around `useTransitionStatus`.\n * @see https://floating-ui.com/docs/useTransition#usetransitionstyles\n */\nfunction useTransitionStyles(context, _temp2) {\n  let {\n    initial: unstable_initial = {\n      opacity: 0\n    },\n    open: unstable_open,\n    close: unstable_close,\n    common: unstable_common,\n    duration = 250\n  } = _temp2 === void 0 ? {} : _temp2;\n  const placement = context.placement;\n  const side = placement.split('-')[0];\n  const [styles, setStyles] = React.useState({});\n  const {\n    isMounted,\n    status\n  } = useTransitionStatus(context, {\n    duration\n  });\n  const initialRef = useLatestRef(unstable_initial);\n  const openRef = useLatestRef(unstable_open);\n  const closeRef = useLatestRef(unstable_close);\n  const commonRef = useLatestRef(unstable_common);\n  const isNumberDuration = typeof duration === 'number';\n  const openDuration = (isNumberDuration ? duration : duration.open) || 0;\n  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;\n  index(() => {\n    const fnArgs = {\n      side,\n      placement\n    };\n    const initial = initialRef.current;\n    const close = closeRef.current;\n    const open = openRef.current;\n    const common = commonRef.current;\n    const initialStyles = typeof initial === 'function' ? initial(fnArgs) : initial;\n    const closeStyles = typeof close === 'function' ? close(fnArgs) : close;\n    const commonStyles = typeof common === 'function' ? common(fnArgs) : common;\n    const openStyles = (typeof open === 'function' ? open(fnArgs) : open) || Object.keys(initialStyles).reduce((acc, key) => {\n      acc[key] = '';\n      return acc;\n    }, {});\n    if (status === 'initial' || status === 'unmounted') {\n      setStyles(styles => ({\n        transitionProperty: styles.transitionProperty,\n        ...commonStyles,\n        ...initialStyles\n      }));\n    }\n    if (status === 'open') {\n      setStyles({\n        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: openDuration + \"ms\",\n        ...commonStyles,\n        ...openStyles\n      });\n    }\n    if (status === 'close') {\n      const styles = closeStyles || initialStyles;\n      setStyles({\n        transitionProperty: Object.keys(styles).map(camelCaseToKebabCase).join(','),\n        transitionDuration: closeDuration + \"ms\",\n        ...commonStyles,\n        ...styles\n      });\n    }\n  }, [side, placement, closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status]);\n  return {\n    isMounted,\n    styles\n  };\n}\n\n/**\n * Provides a matching callback that can be used to focus an item as the user\n * types, often used in tandem with `useListNavigation()`.\n * @see https://floating-ui.com/docs/useTypeahead\n */\nconst useTypeahead = function (_ref, _temp) {\n  var _ref2;\n  let {\n    open,\n    dataRef,\n    refs\n  } = _ref;\n  let {\n    listRef,\n    activeIndex,\n    onMatch: unstable_onMatch = () => {},\n    enabled = true,\n    findMatch = null,\n    resetMs = 1000,\n    ignoreKeys = [],\n    selectedIndex = null\n  } = _temp === void 0 ? {\n    listRef: {\n      current: []\n    },\n    activeIndex: null\n  } : _temp;\n  const timeoutIdRef = React.useRef();\n  const stringRef = React.useRef('');\n  const prevIndexRef = React.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);\n  const matchIndexRef = React.useRef(null);\n  const onMatch = useEvent(unstable_onMatch);\n  const findMatchRef = useLatestRef(findMatch);\n  const ignoreKeysRef = useLatestRef(ignoreKeys);\n  index(() => {\n    if (open) {\n      clearTimeout(timeoutIdRef.current);\n      matchIndexRef.current = null;\n      stringRef.current = '';\n    }\n  }, [open]);\n  index(() => {\n    // Sync arrow key navigation but not typeahead navigation.\n    if (open && stringRef.current === '') {\n      var _ref3;\n      prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;\n    }\n  }, [open, selectedIndex, activeIndex]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    function onKeyDown(event) {\n      var _refs$floating$curren;\n      // Correctly scope nested non-portalled floating elements. Since the nested\n      // floating element is inside of the another, we find the closest role\n      // that indicates the floating element scope.\n      const target = getTarget(event.nativeEvent);\n      if (isElement(target) && (activeElement$1(getDocument(target)) !== event.currentTarget ? (_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(target) ? target.closest('[role=\"dialog\"],[role=\"menu\"],[role=\"listbox\"],[role=\"tree\"],[role=\"grid\"]') !== event.currentTarget : false : !event.currentTarget.contains(target))) {\n        return;\n      }\n      if (stringRef.current.length > 0 && stringRef.current[0] !== ' ') {\n        dataRef.current.typing = true;\n        if (event.key === ' ') {\n          stopEvent(event);\n        }\n      }\n      const listContent = listRef.current;\n      if (listContent == null || ignoreKeysRef.current.includes(event.key) ||\n      // Character key.\n      event.key.length !== 1 ||\n      // Modifier key.\n      event.ctrlKey || event.metaKey || event.altKey) {\n        return;\n      }\n\n      // Bail out if the list contains a word like \"llama\" or \"aaron\". TODO:\n      // allow it in this case, too.\n      const allowRapidSuccessionOfFirstLetter = listContent.every(text => {\n        var _text$, _text$2;\n        return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;\n      });\n\n      // Allows the user to cycle through items that start with the same letter\n      // in rapid succession.\n      if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {\n        stringRef.current = '';\n        prevIndexRef.current = matchIndexRef.current;\n      }\n      stringRef.current += event.key;\n      clearTimeout(timeoutIdRef.current);\n      timeoutIdRef.current = setTimeout(() => {\n        stringRef.current = '';\n        prevIndexRef.current = matchIndexRef.current;\n        dataRef.current.typing = false;\n      }, resetMs);\n      const prevIndex = prevIndexRef.current;\n      const orderedList = [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)];\n      const str = findMatchRef.current ? findMatchRef.current(orderedList, stringRef.current) : orderedList.find(text => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current.toLocaleLowerCase())) === 0);\n      const index = str ? listContent.indexOf(str) : -1;\n      if (index !== -1) {\n        onMatch(index);\n        matchIndexRef.current = index;\n      }\n    }\n    return {\n      reference: {\n        onKeyDown\n      },\n      floating: {\n        onKeyDown\n      }\n    };\n  }, [enabled, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch, refs]);\n};\n\nfunction getArgsWithCustomFloatingHeight(state, height) {\n  return {\n    ...state,\n    rects: {\n      ...state.rects,\n      floating: {\n        ...state.rects.floating,\n        height\n      }\n    }\n  };\n}\n/**\n * Positions the floating element such that an inner element inside\n * of it is anchored to the reference element.\n * @see https://floating-ui.com/docs/inner\n */\nconst inner = props => ({\n  name: 'inner',\n  options: props,\n  async fn(state) {\n    const {\n      listRef,\n      overflowRef,\n      onFallbackChange,\n      offset: innerOffset = 0,\n      index = 0,\n      minItemsVisible = 4,\n      referenceOverflowThreshold = 0,\n      scrollRef,\n      ...detectOverflowOptions\n    } = props;\n    const {\n      rects,\n      elements: {\n        floating\n      }\n    } = state;\n    const item = listRef.current[index];\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state.placement.startsWith('bottom')) {\n        console.warn(['Floating UI: `placement` side must be \"bottom\" when using the', '`inner` middleware.'].join(' '));\n      }\n    }\n    if (!item) {\n      return {};\n    }\n    const nextArgs = {\n      ...state,\n      ...(await offset(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state))\n    };\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;\n    const overflow = await detectOverflow(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);\n    const refOverflow = await detectOverflow(nextArgs, {\n      ...detectOverflowOptions,\n      elementContext: 'reference'\n    });\n    const diffY = Math.max(0, overflow.top);\n    const nextY = nextArgs.y + diffY;\n    const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));\n    el.style.maxHeight = maxHeight + \"px\";\n    el.scrollTop = diffY;\n\n    // There is not enough space, fallback to standard anchored positioning\n    if (onFallbackChange) {\n      if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {\n        flushSync(() => onFallbackChange(true));\n      } else {\n        flushSync(() => onFallbackChange(false));\n      }\n    }\n    if (overflowRef) {\n      overflowRef.current = await detectOverflow(getArgsWithCustomFloatingHeight({\n        ...nextArgs,\n        y: nextY\n      }, el.offsetHeight), detectOverflowOptions);\n    }\n    return {\n      y: nextY\n    };\n  }\n});\n/**\n * Changes the `inner` middleware's `offset` upon a `wheel` event to\n * expand the floating element's height, revealing more list items.\n * @see https://floating-ui.com/docs/inner\n */\nconst useInnerOffset = (_ref, _ref2) => {\n  let {\n    open,\n    elements\n  } = _ref;\n  let {\n    enabled = true,\n    overflowRef,\n    scrollRef,\n    onChange: unstable_onChange\n  } = _ref2;\n  const onChange = useEvent(unstable_onChange);\n  const controlledScrollingRef = React.useRef(false);\n  const prevScrollTopRef = React.useRef(null);\n  const initialOverflowRef = React.useRef(null);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    function onWheel(e) {\n      if (e.ctrlKey || !el || overflowRef.current == null) {\n        return;\n      }\n      const dY = e.deltaY;\n      const isAtTop = overflowRef.current.top >= -0.5;\n      const isAtBottom = overflowRef.current.bottom >= -0.5;\n      const remainingScroll = el.scrollHeight - el.clientHeight;\n      const sign = dY < 0 ? -1 : 1;\n      const method = dY < 0 ? 'max' : 'min';\n      if (el.scrollHeight <= el.clientHeight) {\n        return;\n      }\n      if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {\n        e.preventDefault();\n        flushSync(() => {\n          onChange(d => d + Math[method](dY, remainingScroll * sign));\n        });\n      } else if (/firefox/i.test(getUserAgent())) {\n        // Needed to propagate scrolling during momentum scrolling phase once\n        // it gets limited by the boundary. UX improvement, not critical.\n        el.scrollTop += dY;\n      }\n    }\n    const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n    if (open && el) {\n      el.addEventListener('wheel', onWheel);\n\n      // Wait for the position to be ready.\n      requestAnimationFrame(() => {\n        prevScrollTopRef.current = el.scrollTop;\n        if (overflowRef.current != null) {\n          initialOverflowRef.current = {\n            ...overflowRef.current\n          };\n        }\n      });\n      return () => {\n        prevScrollTopRef.current = null;\n        initialOverflowRef.current = null;\n        el.removeEventListener('wheel', onWheel);\n      };\n    }\n  }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange]);\n  return React.useMemo(() => {\n    if (!enabled) {\n      return {};\n    }\n    return {\n      floating: {\n        onKeyDown() {\n          controlledScrollingRef.current = true;\n        },\n        onWheel() {\n          controlledScrollingRef.current = false;\n        },\n        onPointerMove() {\n          controlledScrollingRef.current = false;\n        },\n        onScroll() {\n          const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;\n          if (!overflowRef.current || !el || !controlledScrollingRef.current) {\n            return;\n          }\n          if (prevScrollTopRef.current !== null) {\n            const scrollDiff = el.scrollTop - prevScrollTopRef.current;\n            if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {\n              flushSync(() => onChange(d => d + scrollDiff));\n            }\n          }\n\n          // [Firefox] Wait for the height change to have been applied.\n          requestAnimationFrame(() => {\n            prevScrollTopRef.current = el.scrollTop;\n          });\n        }\n      }\n    };\n  }, [enabled, overflowRef, elements.floating, scrollRef, onChange]);\n};\n\nfunction isPointInPolygon(point, polygon) {\n  const [x, y] = point;\n  let isInside = false;\n  const length = polygon.length;\n  for (let i = 0, j = length - 1; i < length; j = i++) {\n    const [xi, yi] = polygon[i] || [0, 0];\n    const [xj, yj] = polygon[j] || [0, 0];\n    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;\n    if (intersect) {\n      isInside = !isInside;\n    }\n  }\n  return isInside;\n}\nfunction isInside(point, rect) {\n  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;\n}\nfunction safePolygon(_temp) {\n  let {\n    restMs = 0,\n    buffer = 0.5,\n    blockPointerEvents = false\n  } = _temp === void 0 ? {} : _temp;\n  let timeoutId;\n  let isInsideRect = false;\n  let hasLanded = false;\n  const fn = _ref => {\n    let {\n      x,\n      y,\n      placement,\n      elements,\n      onClose,\n      nodeId,\n      tree\n    } = _ref;\n    return function onMouseMove(event) {\n      function close() {\n        clearTimeout(timeoutId);\n        onClose();\n      }\n      clearTimeout(timeoutId);\n      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {\n        return;\n      }\n      const {\n        clientX,\n        clientY\n      } = event;\n      const clientPoint = [clientX, clientY];\n      const target = getTarget(event);\n      const isLeave = event.type === 'mouseleave';\n      const isOverFloatingEl = contains(elements.floating, target);\n      const isOverReferenceEl = contains(elements.domReference, target);\n      const refRect = elements.domReference.getBoundingClientRect();\n      const rect = elements.floating.getBoundingClientRect();\n      const side = placement.split('-')[0];\n      const cursorLeaveFromRight = x > rect.right - rect.width / 2;\n      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;\n      const isOverReferenceRect = isInside(clientPoint, refRect);\n      if (isOverFloatingEl) {\n        hasLanded = true;\n        if (!isLeave) {\n          return;\n        }\n      }\n      if (isOverReferenceEl) {\n        hasLanded = false;\n      }\n      if (isOverReferenceEl && !isLeave) {\n        hasLanded = true;\n        return;\n      }\n\n      // Prevent overlapping floating element from being stuck in an open-close\n      // loop: https://github.com/floating-ui/floating-ui/issues/1910\n      if (isLeave && isElement(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {\n        return;\n      }\n\n      // If any nested child is open, abort.\n      if (tree && getChildren(tree.nodesRef.current, nodeId).some(_ref2 => {\n        let {\n          context\n        } = _ref2;\n        return context == null ? void 0 : context.open;\n      })) {\n        return;\n      }\n\n      // If the pointer is leaving from the opposite side, the \"buffer\" logic\n      // creates a point where the floating element remains open, but should be\n      // ignored.\n      // A constant of 1 handles floating point rounding errors.\n      if (side === 'top' && y >= refRect.bottom - 1 || side === 'bottom' && y <= refRect.top + 1 || side === 'left' && x >= refRect.right - 1 || side === 'right' && x <= refRect.left + 1) {\n        return close();\n      }\n\n      // Ignore when the cursor is within the rectangular trough between the\n      // two elements. Since the triangle is created from the cursor point,\n      // which can start beyond the ref element's edge, traversing back and\n      // forth from the ref to the floating element can cause it to close. This\n      // ensures it always remains open in that case.\n      let rectPoly = [];\n      switch (side) {\n        case 'top':\n          rectPoly = [[rect.left, refRect.top + 1], [rect.left, rect.bottom - 1], [rect.right, rect.bottom - 1], [rect.right, refRect.top + 1]];\n          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1;\n          break;\n        case 'bottom':\n          rectPoly = [[rect.left, rect.top + 1], [rect.left, refRect.bottom - 1], [rect.right, refRect.bottom - 1], [rect.right, rect.top + 1]];\n          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom;\n          break;\n        case 'left':\n          rectPoly = [[rect.right - 1, rect.bottom], [rect.right - 1, rect.top], [refRect.left + 1, rect.top], [refRect.left + 1, rect.bottom]];\n          isInsideRect = clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom;\n          break;\n        case 'right':\n          rectPoly = [[refRect.right - 1, rect.bottom], [refRect.right - 1, rect.top], [rect.left + 1, rect.top], [rect.left + 1, rect.bottom]];\n          isInsideRect = clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;\n          break;\n      }\n      function getPolygon(_ref3) {\n        let [x, y] = _ref3;\n        const isFloatingWider = rect.width > refRect.width;\n        const isFloatingTaller = rect.height > refRect.height;\n        switch (side) {\n          case 'top':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y + buffer + 1];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'bottom':\n            {\n              const cursorPointOne = [isFloatingWider ? x + buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const cursorPointTwo = [isFloatingWider ? x - buffer / 2 : cursorLeaveFromRight ? x + buffer * 4 : x - buffer * 4, y - buffer];\n              const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n          case 'left':\n            {\n              const cursorPointOne = [x + buffer + 1, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x + buffer + 1, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];\n              return [...commonPoints, cursorPointOne, cursorPointTwo];\n            }\n          case 'right':\n            {\n              const cursorPointOne = [x - buffer, isFloatingTaller ? y + buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const cursorPointTwo = [x - buffer, isFloatingTaller ? y - buffer / 2 : cursorLeaveFromBottom ? y + buffer * 4 : y - buffer * 4];\n              const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];\n              return [cursorPointOne, cursorPointTwo, ...commonPoints];\n            }\n        }\n      }\n      const poly = isInsideRect ? rectPoly : getPolygon([x, y]);\n      if (isInsideRect) {\n        return;\n      } else if (hasLanded && !isOverReferenceRect) {\n        return close();\n      }\n      if (!isPointInPolygon([clientX, clientY], poly)) {\n        close();\n      } else if (restMs && !hasLanded) {\n        timeoutId = setTimeout(close, restMs);\n      }\n    };\n  };\n  fn.__options = {\n    blockPointerEvents\n  };\n  return fn;\n}\n\n/**\n * Provides data to position a floating element and context to add interactions.\n * @see https://floating-ui.com/docs/react\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    open = false,\n    onOpenChange: unstable_onOpenChange,\n    nodeId\n  } = options;\n  const position = useFloating$1(options);\n  const tree = useFloatingTree();\n  const domReferenceRef = React.useRef(null);\n  const dataRef = React.useRef({});\n  const events = React.useState(() => createPubSub())[0];\n  const [domReference, setDomReference] = React.useState(null);\n  const setPositionReference = React.useCallback(node => {\n    const positionReference = isElement(node) ? {\n      getBoundingClientRect: () => node.getBoundingClientRect(),\n      contextElement: node\n    } : node;\n    position.refs.setReference(positionReference);\n  }, [position.refs]);\n  const setReference = React.useCallback(node => {\n    if (isElement(node) || node === null) {\n      domReferenceRef.current = node;\n      setDomReference(node);\n    }\n\n    // Backwards-compatibility for passing a virtual element to `reference`\n    // after it has set the DOM reference.\n    if (isElement(position.refs.reference.current) || position.refs.reference.current === null ||\n    // Don't allow setting virtual elements using the old technique back to\n    // `null` to support `positionReference` + an unstable `reference`\n    // callback ref.\n    node !== null && !isElement(node)) {\n      position.refs.setReference(node);\n    }\n  }, [position.refs]);\n  const refs = React.useMemo(() => ({\n    ...position.refs,\n    setReference,\n    setPositionReference,\n    domReference: domReferenceRef\n  }), [position.refs, setReference, setPositionReference]);\n  const elements = React.useMemo(() => ({\n    ...position.elements,\n    domReference: domReference\n  }), [position.elements, domReference]);\n  const onOpenChange = useEvent(unstable_onOpenChange);\n  const context = React.useMemo(() => ({\n    ...position,\n    refs,\n    elements,\n    dataRef,\n    nodeId,\n    events,\n    open,\n    onOpenChange\n  }), [position, nodeId, events, open, onOpenChange, refs, elements]);\n  index(() => {\n    const node = tree == null ? void 0 : tree.nodesRef.current.find(node => node.id === nodeId);\n    if (node) {\n      node.context = context;\n    }\n  });\n  return React.useMemo(() => ({\n    ...position,\n    context,\n    refs,\n    reference: setReference,\n    positionReference: setPositionReference\n  }), [position, refs, context, setReference, setPositionReference]);\n}\n\nfunction mergeProps(userProps, propsList, elementKey) {\n  const map = new Map();\n  return {\n    ...(elementKey === 'floating' && {\n      tabIndex: -1\n    }),\n    ...userProps,\n    ...propsList.map(value => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {\n      if (!props) {\n        return acc;\n      }\n      Object.entries(props).forEach(_ref => {\n        let [key, value] = _ref;\n        if (key.indexOf('on') === 0) {\n          if (!map.has(key)) {\n            map.set(key, []);\n          }\n          if (typeof value === 'function') {\n            var _map$get;\n            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);\n            acc[key] = function () {\n              var _map$get2;\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n              (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach(fn => fn(...args));\n            };\n          }\n        } else {\n          acc[key] = value;\n        }\n      });\n      return acc;\n    }, {})\n  };\n}\nconst useInteractions = function (propsList) {\n  if (propsList === void 0) {\n    propsList = [];\n  }\n  // The dependencies are a dynamic array, so we can't use the linter's\n  // suggestion to add it to the deps array.\n  const deps = propsList;\n  const getReferenceProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'reference'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n  const getFloatingProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'floating'),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n  const getItemProps = React.useCallback(userProps => mergeProps(userProps, propsList, 'item'),\n  // Granularly check for `item` changes, because the `getItemProps` getter\n  // should be as referentially stable as possible since it may be passed as\n  // a prop to many components. All `item` key values must therefore be\n  // memoized.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  propsList.map(key => key == null ? void 0 : key.item));\n  return React.useMemo(() => ({\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps\n  }), [getReferenceProps, getFloatingProps, getItemProps]);\n};\n\nexport { FloatingDelayGroup, FloatingFocusManager, FloatingNode, FloatingOverlay, FloatingPortal, FloatingTree, inner, safePolygon, useClick, useDelayGroup, useDelayGroupContext, useDismiss, useFloating, useFloatingNodeId, useFloatingParentNodeId, useFloatingPortalNode, useFloatingTree, useFocus, useHover, useId, useInnerOffset, useInteractions, useListNavigation, useMergeRefs, useRole, useTransitionStatus, useTransitionStyles, useTypeahead };\n","import { useState, useEffect } from 'react';\nimport { autoUpdate } from '@floating-ui/react';\nimport { useDidUpdate } from '@mantine/hooks';\n\nfunction useFloatingAutoUpdate({\n  opened,\n  floating,\n  position,\n  positionDependencies\n}) {\n  const [delayedUpdate, setDelayedUpdate] = useState(0);\n  useEffect(() => {\n    if (floating.refs.reference.current && floating.refs.floating.current) {\n      return autoUpdate(floating.refs.reference.current, floating.refs.floating.current, floating.update);\n    }\n    return void 0;\n  }, [\n    floating.refs.reference.current,\n    floating.refs.floating.current,\n    opened,\n    delayedUpdate,\n    position\n  ]);\n  useDidUpdate(() => {\n    floating.update();\n  }, positionDependencies);\n  useDidUpdate(() => {\n    setDelayedUpdate((c) => c + 1);\n  }, [opened]);\n}\n\nexport { useFloatingAutoUpdate };\n//# sourceMappingURL=use-floating-auto-update.js.map\n","import { rem } from '@mantine/styles';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction horizontalSide(placement, arrowY, arrowOffset, arrowPosition) {\n  if (placement === \"center\" || arrowPosition === \"center\") {\n    return { top: arrowY };\n  }\n  if (placement === \"end\") {\n    return { bottom: arrowOffset };\n  }\n  if (placement === \"start\") {\n    return { top: arrowOffset };\n  }\n  return {};\n}\nfunction verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir) {\n  if (placement === \"center\" || arrowPosition === \"center\") {\n    return { left: arrowX };\n  }\n  if (placement === \"end\") {\n    return { [dir === \"ltr\" ? \"right\" : \"left\"]: arrowOffset };\n  }\n  if (placement === \"start\") {\n    return { [dir === \"ltr\" ? \"left\" : \"right\"]: arrowOffset };\n  }\n  return {};\n}\nconst radiusByFloatingSide = {\n  bottom: \"borderTopLeftRadius\",\n  left: \"borderTopRightRadius\",\n  right: \"borderBottomLeftRadius\",\n  top: \"borderBottomRightRadius\"\n};\nfunction getArrowPositionStyles({\n  position,\n  arrowSize,\n  arrowOffset,\n  arrowRadius,\n  arrowPosition,\n  arrowX,\n  arrowY,\n  dir\n}) {\n  const [side, placement = \"center\"] = position.split(\"-\");\n  const baseStyles = {\n    width: rem(arrowSize),\n    height: rem(arrowSize),\n    transform: \"rotate(45deg)\",\n    position: \"absolute\",\n    [radiusByFloatingSide[side]]: rem(arrowRadius)\n  };\n  const arrowPlacement = rem(-arrowSize / 2);\n  if (side === \"left\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), horizontalSide(placement, arrowY, arrowOffset, arrowPosition)), {\n      right: arrowPlacement,\n      borderLeftColor: \"transparent\",\n      borderBottomColor: \"transparent\"\n    });\n  }\n  if (side === \"right\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), horizontalSide(placement, arrowY, arrowOffset, arrowPosition)), {\n      left: arrowPlacement,\n      borderRightColor: \"transparent\",\n      borderTopColor: \"transparent\"\n    });\n  }\n  if (side === \"top\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir)), {\n      bottom: arrowPlacement,\n      borderTopColor: \"transparent\",\n      borderLeftColor: \"transparent\"\n    });\n  }\n  if (side === \"bottom\") {\n    return __spreadProps(__spreadValues(__spreadValues({}, baseStyles), verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir)), {\n      top: arrowPlacement,\n      borderBottomColor: \"transparent\",\n      borderRightColor: \"transparent\"\n    });\n  }\n  return {};\n}\n\nexport { getArrowPositionStyles };\n//# sourceMappingURL=get-arrow-position-styles.js.map\n","import React, { forwardRef } from 'react';\nimport { useMantineTheme } from '@mantine/styles';\nimport { getArrowPositionStyles } from './get-arrow-position-styles.js';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst FloatingArrow = forwardRef((_a, ref) => {\n  var _b = _a, {\n    position,\n    arrowSize,\n    arrowOffset,\n    arrowRadius,\n    arrowPosition,\n    visible,\n    arrowX,\n    arrowY\n  } = _b, others = __objRest(_b, [\n    \"position\",\n    \"arrowSize\",\n    \"arrowOffset\",\n    \"arrowRadius\",\n    \"arrowPosition\",\n    \"visible\",\n    \"arrowX\",\n    \"arrowY\"\n  ]);\n  const theme = useMantineTheme();\n  if (!visible) {\n    return null;\n  }\n  return /* @__PURE__ */ React.createElement(\"div\", __spreadProps(__spreadValues({}, others), {\n    ref,\n    style: getArrowPositionStyles({\n      position,\n      arrowSize,\n      arrowOffset,\n      arrowRadius,\n      arrowPosition,\n      dir: theme.dir,\n      arrowX,\n      arrowY\n    })\n  }));\n});\nFloatingArrow.displayName = \"@mantine/core/FloatingArrow\";\n\nexport { FloatingArrow };\n//# sourceMappingURL=FloatingArrow.js.map\n","function getFloatingPosition(dir, position) {\n  if (dir === \"rtl\" && (position.includes(\"right\") || position.includes(\"left\"))) {\n    const [side, placement] = position.split(\"-\");\n    const flippedPosition = side === \"right\" ? \"left\" : \"right\";\n    return placement === void 0 ? flippedPosition : `${flippedPosition}-${placement}`;\n  }\n  return position;\n}\n\nexport { getFloatingPosition };\n//# sourceMappingURL=get-floating-position.js.map\n"],"names":["arrow","options","element","padding","isRef","value","args","arrow$1","index","useLayoutEffect","useEffect","deepEqual","a","b","length","i","keys","key","useLatestRef","ref","React.useRef","useFloating","placement","strategy","middleware","platform","whileElementsMounted","open","data","setData","React.useState","latestMiddleware","setLatestMiddleware","referenceRef","floatingRef","dataRef","whileElementsMountedRef","platformRef","reference","_setReference","floating","_setFloating","setReference","React.useCallback","node","setFloating","update","config","computePosition","fullData","isMountedRef","ReactDOM.flushSync","refs","React.useMemo","elements","serverHandoffComplete","count","genId","useFloatingId","id","setId","React.useEffect","useReactId","React","useId","createPubSub","map","event","_map$get","handler","listener","l","FloatingNodeContext","React.createContext","FloatingTreeContext","useFloatingParentNodeId","_React$useContext","React.useContext","useFloatingTree","getDocument","getPlatform","uaData","getUserAgent","_ref","brand","version","getWindow","isElement","isHTMLElement","isShadowRoot","OwnElement","isVirtualClick","androidRe","isVirtualPointerEvent","isMouseLikePointerType","pointerType","strict","values","useRef","safePolygonIdentifier","getDelay","prop","useHover","context","_temp","enabled","delay","handleClose","mouseOnly","restMs","move","onOpenChange","events","domReference","tree","parentId","handleCloseRef","delayRef","pointerTypeRef","timeoutRef","handlerRef","restTimeoutRef","blockMouseMoveRef","performedPointerEventsMutationRef","unbindMouseMoveRef","isHoverOpen","_dataRef$current$open","type","onDismiss","onLeave","html","closeWithDelay","runElseBranch","closeDelay","cleanupMouseMoveHandler","clearPointerEvents","body","isClickLikeOpenEvent","onMouseEnter","openDelay","onMouseLeave","doc","onScrollMouseLeave","_handleCloseRef$curre","_tree$nodesRef$curren","_tree$nodesRef$curren2","parentFloating","setPointerRef","FloatingDelayGroupContext","useDelayGroupContext","FloatingDelayGroup","children","timeoutMs","state","setState","React.useReducer","prev","next","initialCurrentIdRef","setCurrentId","currentId","React.createElement","useDelayGroup","_ref2","_ref3","initialDelay","unset","timeout","activeElement$1","activeElement","_activeElement","_activeElement$shadow","contains","parent","child","rootNode","getChildren","nodes","allChildren","_node$context","currentChildren","_currentChildren","n","_node$context2","getTarget","useInsertionEffect","useSafeInsertionEffect","fn","useEvent","callback","_len","_key","isEventTargetWithin","e","bubbleHandlerKeys","captureHandlerKeys","normalizeBubblesProp","bubbles","_bubbles$escapeKey","_bubbles$outsidePress","useDismiss","nodeId","escapeKey","unstable_outsidePress","outsidePressEvent","referencePress","referencePressEvent","ancestorScroll","nested","outsidePressFn","outsidePress","insideReactTreeRef","escapeKeyBubbles","outsidePressBubbles","onKeyDown","shouldDismiss","_child$context","onOutsidePress","insideReactTree","target","win","canScrollX","canScrollY","xCond","targetIsInsideChildren","_child$context2","onScroll","ancestors","getOverflowAncestors","ancestor","_doc$defaultView","useFocus","keyboardOnly","blockFocusRef","onBlur","payload","relatedTarget","movedToFocusGuard","useRole","role","rootId","referenceId","floatingProps","unstable_onOpenChange","position","useFloating$1","domReferenceRef","setDomReference","setPositionReference","positionReference","mergeProps","userProps","propsList","elementKey","acc","props","_map$get2","useInteractions","deps","getReferenceProps","getFloatingProps","getItemProps","useFloatingAutoUpdate","opened","positionDependencies","delayedUpdate","setDelayedUpdate","useState","autoUpdate","useDidUpdate","c","__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","__spreadValues","__spreadProps","horizontalSide","arrowY","arrowOffset","arrowPosition","verticalSide","arrowX","dir","radiusByFloatingSide","getArrowPositionStyles","arrowSize","arrowRadius","side","baseStyles","rem","arrowPlacement","__objRest","source","exclude","FloatingArrow","forwardRef","_a","_b","visible","others","theme","useMantineTheme","getFloatingPosition","flippedPosition"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}